<?php

namespace App\Http\Controllers\Api;

use App\Enums\LeadStatusEnum;
use App\Enums\NotificationTypeEnum;
use App\Enums\JobStatusEnum;
use App\Enums\WhatsappMessageTemplateEnum;
use App\Events\WhatsappNotificationEvent;
use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Client;
use App\Models\Job;
use App\Jobs\SendMeetingMailJob;
use App\Models\Offer;
use App\Models\WorkerWebhookResponse;
use App\Models\WhatsAppBotWorkerState;
use App\Models\Notification;
use App\Models\WorkerMetas;
use App\Models\WorkerLeads;
use App\Models\ScheduleChange;
use App\Models\ManpowerCompany;
use App\Models\WhatsAppBotActiveWorkerState;
use App\Models\WorkerInvitation;
use App\Models\WorkerAvailability;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use Twilio\Rest\Client as TwilioClient;



class WorkerLeadWebhookController extends Controller
{
    protected $twilioAccountSid;
    protected $twilioAuthToken;
    protected $twilioWhatsappNumber;
    protected $twilioWorkerLeadWhatsappNumber;
    protected $twilio;

    protected $botMessages = [
        'step0' => [
            'en' => "Hello, this is JOB4SERVICE.\nWe provide home and apartment cleaning jobs with regular clients in Tel Aviv and the surrounding area.\nTo continue and give you more details, please let us know:\n\nDo you have experience in house or apartment cleaning? What kind?\n\nDo you have an Israeli ID, a valid work visa (blue visa or other legal work visa), or a Ukrainian passport?\nUnfortunately, we cannot accept anything else.\n\nIf you'd like to speak to a human representative, please type 'representative'.\nThank you in advance ‚Äî looking forward to hearing from you!",
            'ru' => "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ JOB4SERVICE.\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ —É–±–æ—Ä–∫–µ –¥–æ–º–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∏—Ä —É –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¢–µ–ª—å-–ê–≤–∏–≤–µ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –¥–∞—Ç—å –≤–∞–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ:\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —É–±–æ—Ä–∫–∏ –¥–æ–º–æ–≤ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä? –ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ?\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–µ—É–¥–∞—Ç –∑–µ—É—Ç, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ (—Å–∏–Ω—è—è –≤–∏–∑–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–µ–≥–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞) –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç?\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å'.\n–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ ‚Äî –∂–¥—ë–º –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞! üòä",
        ],
        'speak_to_representative' => [
            'en' => "Thank you for your request. A human representative will contact you shortly. Please stay available.",
            'ru' => "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏.",
        ],
        'step0_meta' => [
            'en' => "Hello,\nWe provide home and apartment cleaning jobs with regular clients in Tel Aviv and the surrounding area.\nTo continue and give you more details, please let us know:\n\nDo you have experience in house or apartment cleaning? What kind?\n\nDo you have an Israeli ID, a valid work visa (blue visa or other legal work visa), or a Ukrainian passport?\nUnfortunately, we cannot accept anything else.\nThank you in advance ‚Äî looking forward to hearing from you",
            'ru' => "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ —É–±–æ—Ä–∫–µ –¥–æ–º–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∏—Ä —É –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¢–µ–ª—å-–ê–≤–∏–≤–µ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –¥–∞—Ç—å –≤–∞–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ:\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —É–±–æ—Ä–∫–∏ –¥–æ–º–æ–≤ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä? –ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ?\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–µ—É–¥–∞—Ç –∑–µ—É—Ç, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ (—Å–∏–Ω—è—è –≤–∏–∑–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–µ–≥–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞) –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç?\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å.\n–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ ‚Äî –∂–¥—ë–º –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞! "
        ],
        'step1' => [
            'en' => "We didn‚Äôt quite understand your answer.\n\n‚úÖ Please respond clearly with:\n\n1. \"Yes\" or \"No\" ‚Äì Do you have experience in house cleaning?\n\nLet‚Äôs continue when you‚Äôre ready! üòä",
            'ru' => "–ú—ã –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç.\n\n‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ç–∫–æ:\n\n1. \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" ‚Äì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —É–±–æ—Ä–∫–µ?\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üòä  ",
        ],
        'step2' => [
            'en' => "2. Do you have a valid visa or ID as mentioned above?",
            'ru' => "2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏?",
        ],
        'step3' => [
            'en' => "We didn‚Äôt quite understand your answer.\n\n‚úÖ Please respond clearly with:\n\n2. \"Yes\" or \"No\" ‚Äì Do you have a valid work visa (Israeli ID, B1 visa, or refugee visa)?\n\nLet‚Äôs continue when you‚Äôre ready! üòä",
            'ru' => "–ú—ã –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç.\n\n‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ç–∫–æ:\n\n2. \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" ‚Äì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ (–∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ, –≤–∏–∑–∞ B1 –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –±–µ–∂–µ–Ω—Ü–∞)?\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üòä",
        ],
    ];

    protected $activeWorkersbotMessages = [
        'main_menu' => [
            'en' => "Hi, :worker_name!\nWelcome to Gali, the Broom Service digital assistant bot.\nHow can I assist you today? üåü\n\n1Ô∏è‚É£ Talk to a manager urgently.\n2Ô∏è‚É£ Change my work schedule.\n3Ô∏è‚É£ What's my schedule for today and tomorrow?\n4Ô∏è‚É£ Access the employee portal.\n\nAt any time, you can return to the main menu by typing 'Menu'.\nPlease reply with the number of your choice.",
            'heb' => "◊î◊ô◊ô, :worker_name!\n◊ë◊®◊ï◊ö ◊î◊ë◊ê ◊ú◊í◊ú◊ô, ◊î◊ë◊ï◊ò ◊î◊ì◊ô◊í◊ô◊ò◊ú◊ô ◊©◊ú ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊°.\n◊ê◊ô◊ö ◊ê◊§◊©◊® ◊ú◊¢◊ñ◊ï◊® ◊ú◊ö ◊î◊ô◊ï◊ù? üåü\n\n1Ô∏è‚É£ ◊ú◊ì◊ë◊® ◊¢◊ù ◊û◊†◊î◊ú ◊ë◊ì◊ó◊ô◊§◊ï◊™.\n2Ô∏è‚É£ ◊©◊ô◊†◊ï◊ô ◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ô.\n3Ô∏è‚É£ ◊û◊î ◊î◊ú◊ï◊ñ ◊©◊ú◊ô ◊ú◊î◊ô◊ï◊ù ◊ï◊ú◊û◊ó◊®?\n4Ô∏è‚É£ ◊í◊ô◊©◊î ◊ú◊§◊ï◊®◊ò◊ú ◊î◊¢◊ï◊ë◊ì◊ô◊ù ◊©◊ú◊†◊ï.\n\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.\n◊†◊ê ◊ú◊î◊©◊ô◊ë ◊¢◊ù ◊î◊û◊°◊§◊® ◊î◊û◊™◊ê◊ô◊ù.",
            'ru' => "–ü—Ä–∏–≤–µ—Ç, :worker_name!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞–ª–∏, —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–æ—Ç Broom Service.\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? üåü\n\n1Ô∏è‚É£ –°—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.\n3Ô∏è‚É£ –ö–∞–∫–æ–µ —É –º–µ–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞?\n4Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.",
            'spa' => "Hola, :worker_name!\nBienvenido a Gali, el bot asistente digital de Broom Service.\n¬øC√≥mo puedo ayudarte hoy? üåü\n\n1Ô∏è‚É£ Habla con un gerente urgentemente.\n2Ô∏è‚É£ Cambia mi horario de trabajo.\n3Ô∏è‚É£ ¬øCu√°l es mi horario para hoy y ma√±ana?\n4Ô∏è‚É£ Accede al portal de empleados.\n\nEn cualquier momento, puedes regresar al men√∫ principal escribiendo 'Men√∫'.\nResponde con el n√∫mero de tu elecci√≥n.",
        ],
        'talk_to_manager' => [

            'en' => "Please tell us the reason for contacting a manager. Your request will be forwarded to the relevant team.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊ê◊†◊ê ◊§◊®◊ò ◊ê◊™ ◊î◊°◊ô◊ë◊î ◊©◊ë◊í◊ú◊ú◊î ◊™◊®◊¶◊î ◊ú◊ì◊ë◊® ◊¢◊ù ◊û◊†◊î◊ú. ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö ◊™◊ï◊¢◊ë◊® ◊ú◊¶◊ï◊ï◊™ ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Por favor, indica la raz√≥n de la llamada. Tu solicitud se enviar√° a la equipo relevante.\nEn cualquier momento, puedes regresar al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'comment' => [
            'en' => "Hello :worker_name,\nWe received your message:\n\n':message'\n\nYour request has been forwarded to the relevant manager for further handling.",
            'heb' => "◊©◊ú◊ï◊ù :worker_name,\n◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊î◊î◊ï◊ì◊¢◊î ◊©◊ú◊ö:\n\n':message'\n\n◊î◊ë◊ß◊©◊î ◊©◊ú◊ö ◊î◊ï◊¢◊ë◊®◊î ◊ú◊û◊†◊î◊ú ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ú◊î◊û◊©◊ö ◊ò◊ô◊§◊ï◊ú.",
            'ru' => "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, :worker_name,\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n':message'\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            'spa' => "Hola, :worker_name,\nRecibimos tu mensaje:\n\n':message'\n\nTu solicitud ha sido enviada al gerente relevante para su posterior tratamiento.",
        ],
        'team_comment' => [
            'en' => "üö® :worker_name requested to speak to a manager urgently. \nReason: :message. \nPlease contact them immediately.",
        ],
        'change_schedule' => [
            'en' => "Please share the changes you'd like to make to your schedule. We will review your request and get back to you.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊ê◊†◊ê ◊¢◊ì◊õ◊ü ◊ê◊ï◊™◊†◊ï ◊¢◊ú ◊î◊©◊ô◊†◊ï◊ô◊ô◊ù ◊©◊™◊®◊¶◊î ◊ú◊ë◊¶◊¢ ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö. ◊†◊ë◊ì◊ï◊ß ◊ê◊™ ◊î◊ë◊ß◊©◊î ◊ï◊†◊ó◊ñ◊ï◊® ◊ê◊ú◊ô◊ö.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Indique los cambios que desea realizar en su agenda. Revisaremos su solicitud y nos comunicaremos con usted. En cualquier momento, puede regresar al men√∫ principal escribiendo 'Men√∫'."
        ],
        'team_schedule_change' => [
            'en' => ":worker_name requested a schedule change: :message. \nPlease review and handle accordingly..",
        ],
        'change_schedule_comment' => [
            'en' => "We received your request for schedule changes.\nHere‚Äôs your request:\n':message'\nYour request has been forwarded to our team for review and action.",
            'heb' => "◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊ë◊ß◊©◊™◊ö ◊ú◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î.\n◊ú◊î◊ú◊ü ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö:\n':message'\n◊î◊ë◊ß◊©◊î ◊î◊ï◊¢◊ë◊®◊î ◊ú◊¶◊ï◊ï◊™ ◊©◊ú◊†◊ï ◊ú◊ë◊ì◊ô◊ß◊î ◊ï◊ò◊ô◊§◊ï◊ú.",
            'ru' => "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.\n–í–æ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n':message'\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            'spa' => "Hemos recibido tu solicitud de cambios en el horario.\nAqu√≠ est√° tu solicitud:\n':message'\nTu solicitud ha sido enviada a nuestro equipo para su revisi√≥n y acci√≥n.",
        ],
        'sorry' => [
            'en' => "I'm sorry, I didn‚Äôt understand your response.\n‚Ä¢ Reply with a number from the menu options.\n‚Ä¢ Type 'menu' to return to the main menu.",
            'heb' => "◊û◊¶◊ò◊¢◊®◊ô◊ù, ◊ú◊ê ◊î◊ë◊†◊ï ◊ê◊™ ◊™◊©◊ï◊ë◊™◊ö.\n‚Ä¢ ◊ê◊†◊ê ◊î◊©◊ë ◊¢◊ù ◊û◊°◊§◊® ◊û◊ê◊ó◊™ ◊î◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊ë◊™◊§◊®◊ô◊ò.\n‚Ä¢ ◊î◊ß◊ú◊ì '◊™◊§◊®◊ô◊ò' ◊õ◊ì◊ô ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô",
            'ru' => "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª.\n‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é.\n‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            'spa' => "Lo siento, no entend√≠ tu respuesta.\n‚Ä¢ Responde con un n√∫mero de las opciones del men√∫.\n‚Ä¢ Escribe 'men√∫' para volver al men√∫ principal.",
        ],
        'access_employee_portal' => [
            'en' => "Here is the link to the employee portal: üåê\n:link\nLog in with your credentials to access your account and details.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊î◊†◊î ◊î◊ß◊ô◊©◊ï◊® ◊ú◊§◊ï◊®◊ò◊ú ◊î◊¢◊ï◊ë◊ì◊ô◊ù: üåê\n:link\n◊î◊ô◊õ◊†◊° ◊¢◊ù ◊î◊§◊®◊ò◊ô◊ù ◊©◊ú◊ö ◊õ◊ì◊ô ◊ú◊í◊©◊™ ◊ú◊ó◊©◊ë◊ï◊†◊ö.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: üåê\n:link\n–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏ –¥–µ—Ç–∞–ª—è–º.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Aqu√≠ est√° el enlace al portal de empleados: üåê\n:link\nInicia sesi√≥n con tus credenciales para acceder a tu cuenta y detalles.\nEn cualquier momento, puedes volver al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'today_and_tomorrow_schedule' => [
            'en' => "Your schedule is as follows:\nToday: :today_schedule\nTomorrow: :tomorrow_schedule\n\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö ◊î◊ï◊ê:\n◊î◊ô◊ï◊ù: :today_schedule\n◊û◊ó◊®: :tomorrow_schedule\n\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Å–ª–µ–¥—É—é—â–∏–π:\n–°–µ–≥–æ–¥–Ω—è: :today_schedule\n–ó–∞–≤—Ç—Ä–∞: :tomorrow_schedule\n\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Tu horario es el siguiente:\nHoy: :today_schedule\nMa√±ana: :tomorrow_schedule\n\nEn cualquier momento, puedes volver al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'attempts' => [
            "en" => "We couldn't verify your request. Please contact the team directly for assistance.",
            "heb" => "◊ú◊ê ◊î◊¶◊ú◊ó◊†◊ï ◊ú◊ê◊û◊™ ◊ê◊™ ◊ë◊ß◊©◊™◊ö. ◊ê◊†◊ê ◊¶◊ï◊® ◊ß◊©◊® ◊¢◊ù ◊î◊¶◊ï◊ï◊™ ◊ô◊©◊ô◊®◊ï◊™ ◊ú◊¢◊ñ◊®◊î.",
            "ru" => "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–º–æ—â–∏.",
        ],
        "team_attempts" => [
            "en" => ":worker_name failed to complete their request. Please reach out to them.",
            "heb" => ":worker_name ◊ú◊ê ◊î◊©◊ú◊ô◊ù ◊ê◊™ ◊ë◊ß◊©◊™◊ï. ◊†◊ê ◊ú◊ô◊¶◊ï◊® ◊ß◊©◊® ◊¢◊û◊ï.",
            "ru" => ":worker_name –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.",
        ],
        "seen_schedule" => [
            "en" => "Thank you! We received the confirmation.",
            "heb" => "◊™◊ï◊ì◊î! ◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊î◊ê◊ô◊©◊ï◊®.",
            "ru" => "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
            "spa" => "¬°Gracias! Recibimos la confirmaci√≥n.",
        ],
        "contact_manager" => [
            "en" => "What would you like to tell the manager?",
            "heb" => "◊û◊î ◊ë◊®◊¶◊ï◊†◊ö ◊ú◊û◊°◊ï◊® ◊ú◊û◊†◊î◊ú?",
            "ru" => "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É?",
            "spa" => "¬øQue quieres decir al manager?",
        ],
        "to_management" => [
            "heb" => "◊î◊ï◊ì◊¢◊î ◊ë◊†◊ï◊í◊¢ ◊ú◊ê◊ô◊©◊ï◊® ◊õ◊™◊ï◊ë◊ï◊™ ◊û◊ó◊® ◊û◊ê◊™ :worker_name\n\n:message\n"
        ],
        "to_management_link" => [
            "heb" => "‚Ä¢	üÖ∞ ◊ê◊©◊® ◊ë◊©◊ù ◊î◊¢◊ï◊ë◊ì ◊©◊®◊ê◊î ◊õ◊™◊ï◊ë◊™ \n‚Ä¢	üÖ± ◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊®\n:link\n‚Ä¢	üÜë ◊ò◊ú◊§◊ï◊ü ◊©◊ú ◊î◊¢◊ï◊ë◊ì + ◊ò◊ú◊§◊ï◊ü ◊©◊ú ◊î◊ú◊ß◊ï◊ó"
        ]
    ];


    public function __construct()
    {
        $this->twilioAccountSid = config('services.twilio.twilio_id');
        $this->twilioAuthToken = config('services.twilio.twilio_token');
        $this->twilioWhatsappNumber = config('services.twilio.twilio_whatsapp_number');
        $this->twilioWorkerLeadWhatsappNumber = config('services.twilio.worker_lead_whatsapp_number');

        // Initialize the Twilio client
        $this->twilio = new TwilioClient($this->twilioAccountSid, $this->twilioAuthToken);
    }

    private function isJson($string)
    {
        json_decode($string);
        return (json_last_error() === JSON_ERROR_NONE);
    }


    public function fbWebhookCurrentLive(Request $request)
    {
        $data = [];
        $messageId = null;
        $lng = "en";

        $content = $request->getContent();
        $data = json_decode($content, true);
        $messageId = $data['messages'][0]['id'] ?? null;
        $fromNumber = $data['messages'][0]['from'] ?? null;
        $number = explode('@', $data['messages'][0]['chat_id'] ?? '')[0];

        if (
            isset($data['messages']) &&
            isset($data['messages'][0]['from_me']) &&
            $data['messages'][0]['from_me'] == true &&
            $data['messages'][0]['source'] != "api"
        ) {
            if ($number) {
                // Store the number in the cache for 20 minutes
                Cache::put('cached_from_number', $number, now()->addMinutes(20));
            }
        }

        if (!$messageId) {
            \Log::info('Invalid message data');
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if ((Cache::get('worker_processed_message_' . $messageId) === $messageId) || (Cache::get('cached_from_number') === $fromNumber)) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        $message_data = $data['messages'];
        if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
            die("Group message");
        }
        $from = $message_data[0]['from'];
        $input = $data['messages'][0]['text']['body'] ?? "";
        $lng = $this->detectLanguage($input);

        WorkerWebhookResponse::create([
            'status' => 1,
            'name' => 'whatsapp',
            'entry_id' => $messageId,
            'message' => $input,
            'number' => $from,
            'from' => config("services.whapi.whapi_worker_lead_number_1"),
            'read' => 0,
            'flex' => 'W',
            'data' => json_encode($data)
        ]);

        $workerLead = WorkerLeads::where('phone', $from)->first();
        $user = User::where('phone', $from)
            ->where('status', 1)
            ->first();
        $client = Client::where('phone', $from)->first();

        if ($client) {
            \Log::info('client already exist ...' . $client->id);
            die("client already exist");
        }

        if ($user) {
            \Log::info('user already exist ...');
            die("user already exist");
        }

        if (!$workerLead) {

            $workerLead = WorkerLeads::create([
                'phone' => $from,
                'lng' => $lng,
                'source' => 'seo',
            ]);

            WhatsAppBotWorkerState::updateOrCreate(
                ['worker_lead_id' => $workerLead->id],
                ['step' => 0, 'language' => $lng]
            );

            // Send the step0 message
            $initialMessage = $this->botMessages['step0'][$lng];
            $result = sendWorkerLeadWhatsappMessage($from, array('name' => '', 'message' => $initialMessage, 'list' => [], 'buttons' => []));
            StoreWorkerWebhookResponse($initialMessage, $from, $result);

            return;
        } else {
            die("user already exist");
        }

        // $workerState = WhatsAppBotWorkerState::where("worker_lead_id", $workerLead->id)->first();

        // if ($workerState && $workerState->step == 4) {
        //     // Conversation is complete, no further processing
        //     return response()->json(['status' => 'Conversation complete'], 200);
        // }
    }

    public function fbWebhookCurrentLive2(Request $request)
    {
        $data = [];
        $messageId = null;
        $lng = "en";

        $content = $request->getContent();
        $data = json_decode($content, true);
        $messageId = $data['messages'][0]['id'] ?? null;
        $fromNumber = $data['messages'][0]['from'] ?? null;
        $number = explode('@', $data['messages'][0]['chat_id'] ?? '')[0];

        if (
            isset($data['messages']) &&
            isset($data['messages'][0]['from_me']) &&
            $data['messages'][0]['from_me'] == true &&
            $data['messages'][0]['source'] != "api"
        ) {
            if ($number) {
                // Store the number in the cache for 20 minutes
                Cache::put('cached_from_number', $number, now()->addMinutes(20));
            }
        }

        if (!$messageId) {
            \Log::info('Invalid message data');
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if ((Cache::get('worker_processed_message_' . $messageId) === $messageId) || (Cache::get('cached_from_number') === $fromNumber)) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        $message_data = $data['messages'];
        if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
            die("Group message");
        }
        $from = $message_data[0]['from'];
        $input = $data['messages'][0]['text']['body'] ?? "";
        $lng = $this->detectLanguage($input);

        WorkerWebhookResponse::create([
            'status' => 1,
            'name' => 'whatsapp',
            'entry_id' => $messageId,
            'message' => $input,
            'number' => $from,
            'from' => config("services.whapi.whapi_worker_lead_number_2"),
            'read' => 0,
            'flex' => 'W',
            'data' => json_encode($data)
        ]);

        $workerLead = WorkerLeads::where('phone', $from)->first();
        $user = User::where('phone', $from)
            ->where('status', 1)
            ->first();
        $client = Client::where('phone', $from)->first();

        if ($client) {
            \Log::info('client already exist ...' . $client->id);
            die("client already exist");
        }

        if ($user) {
            \Log::info('user already exist ...');
            die("user already exist");
        }

        if (!$workerLead) {

            $workerLead = WorkerLeads::create([
                'phone' => $from,
                'lng' => $lng,
                'source' => 'meta',
            ]);

            WhatsAppBotWorkerState::updateOrCreate(
                ['worker_lead_id' => $workerLead->id],
                ['step' => 0, 'language' => $lng]
            );

            // Send the step0 message
            $initialMessage = $this->botMessages['step0_meta'][$lng];
            $result = sendWorkerLeadWhatsappMessage($from, array('name' => '', 'message' => $initialMessage, 'list' => [], 'buttons' => []), true);
            StoreWorkerWebhookResponse($initialMessage, $from, $result, true);
            return;
        } else {
            die("user already exist");
        }
    }

    // public function createUser($workerLead){
    //     $firstname = explode(" ", $workerLead->name)[0];
    //     $worker = User::create([
    //         'firstname'     => $request->firstname,
    //         'lastname'      => ($request->lastname) ? $request->lastname : '',
    //         'phone'         => $request->phone,
    //         'email'         => null,
    //         'role'          => $role,
    //         'lng'           => $request->lng,
    //         'passcode'      => $request->password,
    //         'password'      => Hash::make($request->password),
    //         'company_type'  => $request->company_type,
    //         'status'        => $request->status,
    //         'manpower_company_id'       => $request->company_type == "manpower"
    //             ? $request->manpower_company_id
    //             : NULL,
    //         'step' => 0
    //     ]);
    // }

    public function hebdetectLanguage($text)
    {
        // Regex for hebrew
        if (preg_match('/[\x{0590}-\x{05FF}]/u', $text)) {
            return 'heb';
        } else {
            return 'en';
        }
    }


    // public function fbActiveWorkersWebhookCurrentLive(Request $request)
    // {
    //     $get_data = $request->getContent();
    //     $data_returned = json_decode($get_data, true);
    //     $messageId = $data_returned['messages'][0]['id'] ?? null;
    //     $lng = "en";

    //     if (!$messageId) {
    //         return response()->json(['status' => 'Invalid message data'], 400);
    //     }

    //     // Check if the messageId exists in cache and matches
    //     if (Cache::get('active_worker_processed_message_' . $messageId) === $messageId) {
    //         \Log::info('Already processed');
    //         return response()->json(['status' => 'Already processed'], 200);
    //     }

    //     // Store the messageId in the cache for 1 hour
    //     Cache::put('active_worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

    //     if (
    //         isset($data_returned['messages']) &&
    //         isset($data_returned['messages'][0]['from_me']) &&
    //         $data_returned['messages'][0]['from_me'] == false
    //     ) {
    //         $message_data = $data_returned['messages'];
    //         if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
    //             die("Group message");
    //         }
    //         $from = $message_data[0]['from'];
    //         $input = trim($data_returned['messages'][0]['text']['body'] ?? '');
    //         $lng = "heb";

    //         WorkerWebhookResponse::create([
    //             'status' => 1,
    //             'name' => 'whatsapp',
    //             'entry_id' => (isset($get_data['entry'][0])) ? $get_data['entry'][0]['id'] : '',
    //             'message' => $data_returned['messages'][0]['text']['body'] ?? '',
    //             'number' => $from,
    //             'read' => 0,
    //             'flex' => 'W',
    //             'data' => json_encode($get_data)
    //         ]);

    //         $user = User::where('phone', $from)
    //                 ->where('status', 1)
    //                 ->first();
    //         if ($user) {
    //             \Log::info('User found activeWorker: ' . $user);
    //         }

    //         if ($user && $user->stop_last_message == 1) {
    //             $lng = $user->lng;
    //             $last_menu = null;
    //             $send_menu = null;
    //             $activeWorkerBot = WhatsAppBotActiveWorkerState::where('worker_id', $user->id)->first();

    //             if($activeWorkerBot){
    //                 $menu_option = explode('->', $activeWorkerBot->menu_option);
    //                 $last_menu = end($menu_option);
    //             }

    //             $cacheKey = 'send_menu_sorry_count_' . $from;

    //             // Initialize the cache if not already set
    //             if (!Cache::has($cacheKey)) {
    //                 Cache::put($cacheKey, 0, now()->addHours(24));
    //             }

    //             if(empty($last_menu) || in_array(strtolower($input), ["menu", "–º–µ–Ω—é", "◊™◊§◊®◊ô◊ò", "men√∫"])) {
    //                 $send_menu = 'main_menu';
    //             } else if ($last_menu == 'main_menu' && $input == '1') {
    //                 $send_menu = 'talk_to_manager';
    //             } else if ($last_menu == 'talk_to_manager' && !empty($input)) {
    //                 $send_menu = 'comment';
    //             } else if ($last_menu == 'main_menu' && $input == '2') {
    //                 $send_menu = 'change_schedule';
    //             } else if ($last_menu == 'change_schedule' && !empty($input)) {
    //                 $send_menu = 'change_schedule_comment';
    //             } else if ($last_menu == 'main_menu' && $input == '3') {
    //                 $send_menu = 'today_and_tomorrow_schedule';
    //             } else if ($last_menu == 'main_menu' && $input == '4') {
    //                 $send_menu = 'access_employee_portal';
    //             } else {
    //                 // Handle 'sorry' case
    //                 $send_menu = 'sorry';
    //                 $sorryCount = Cache::increment($cacheKey);
    //                 if ($sorryCount > 4) {
    //                     Cache::put($cacheKey, 0, now()->addHours(24)); // Reset to 0 and keep the cache expiration
    //                     $send_menu = 'attempts_exceeded'; // Handle as 'attempts_exceeded'
    //                 } elseif ($sorryCount == 4) {
    //                     $send_menu = 'attempts_exceeded';
    //                 }
    //             }

    //             switch ($send_menu) {
    //                 case 'main_menu':
    //                     $initialMessage = $this->activeWorkersbotMessages['main_menu'][$lng];
    //                     WhatsAppBotActiveWorkerState::updateOrCreate(
    //                         ["worker_id" => $user->id],
    //                         [
    //                             'menu_option' => 'main_menu',
    //                             'lng' => $lng,
    //                         ]
    //                     );
    //                     // Replace :worker_name with the user's firstname and lastname
    //                     $workerName = "*".(($user->firstname ?? ''). ' ' . ($user->lastname ?? ''))."*";
    //                     $personalizedMessage = str_replace(':worker_name', $workerName, $initialMessage);
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);

    //                     WorkerWebhookResponse::create([
    //                         'status' => 1,
    //                         'name' => 'whatsapp',
    //                         'message' => $personalizedMessage,
    //                         'number' => $from,
    //                         'read' => 1,
    //                         'flex' => 'A',
    //                     ]);
    //                     break;

    //                 case 'talk_to_manager':
    //                     $nextMessage = $this->activeWorkersbotMessages['talk_to_manager'][$lng];
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);

    //                     $activeWorkerBot->update(['menu_option' => 'main_menu->talk_to_manager', 'lng' => $lng]);

    //                     WorkerWebhookResponse::create([
    //                         'status' => 1,
    //                         'name' => 'whatsapp',
    //                         'message' => $nextMessage,
    //                         'number' => $from,
    //                         'read' => 1,
    //                         'flex' => 'A',
    //                     ]);
    //                     break;

    //                 case 'comment':
    //                     $nextMessage = $this->activeWorkersbotMessages['comment'][$lng];
    //                     $workerName = (($user->firstname ?? ''). ' ' . ($user->lastname ?? ''));
    //                     $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);

    //                     $nextMessage = $this->activeWorkersbotMessages['team_comment']["en"];
    //                     $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
    //                     sendTeamWhatsappMessage(config('services.whatsapp_groups.problem_with_workers'), ['name' => '', 'message' => $personalizedMessage]);
    //                     $activeWorkerBot->delete();
    //                     break;

    //                 case 'change_schedule':
    //                     $nextMessage = $this->activeWorkersbotMessages['change_schedule'][$lng];
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);

    //                     $activeWorkerBot->update(['menu_option' => 'main_menu->change_schedule', 'lng' => $lng]);

    //                     WorkerWebhookResponse::create([
    //                         'status' => 1,
    //                         'name' => 'whatsapp',
    //                         'message' => $nextMessage,
    //                         'number' => $from,
    //                         'read' => 1,
    //                         'flex' => 'A',
    //                     ]);
    //                     break;

    //                 case 'change_schedule_comment':
    //                     if ($lng == 'heb') {
    //                         $reason = "◊©◊†◊î ◊ú◊ï◊ó ◊ñ◊û◊†◊ô◊ù";
    //                     }else if($lng == 'spa'){
    //                         $reason = "Cambiar horario";
    //                     }else if($lng == 'ru'){
    //                         $reason = "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
    //                     }else{
    //                         $reason = "Change Schedule";
    //                     }
    //                     $scheduleChange = new ScheduleChange();
    //                     $scheduleChange->user_type = get_class($user);
    //                     $scheduleChange->user_id = $user->id;
    //                     $scheduleChange->reason = $reason;
    //                     $scheduleChange->comments = $input;
    //                     $scheduleChange->save();

    //                     $nextMessage = $this->activeWorkersbotMessages['team_schedule_change']["en"];
    //                     $workerName = (($user->firstname ?? ''). ' ' . ($user->lastname ?? ''));
    //                     $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
    //                     sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);

    //                     $message = $this->activeWorkersbotMessages['change_schedule_comment'][$lng];
    //                     $message = str_replace([':message'], [$input], $message);
    //                     sendClientWhatsappMessage($from, array('message' => $message));
    //                     $activeWorkerBot->delete();
    //                     break;

    //                 case 'access_employee_portal':
    //                     $nextMessage = $this->activeWorkersbotMessages['access_employee_portal'][$lng];
    //                     $personalizedMessage = str_replace(':link', generateShortUrl(url("worker/login"), 'worker'), $nextMessage);
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);
    //                     $activeWorkerBot->delete();
    //                     break;

    //                 case 'sorry':
    //                     $message = $this->activeWorkersbotMessages['sorry'][$lng];
    //                     sendClientWhatsappMessage($from, array('message' => $message));
    //                     break;

    //                 case 'today_and_tomorrow_schedule':
    //                     $nextMessage = $this->activeWorkersbotMessages['today_and_tomorrow_schedule'][$lng];
    //                     $todayJobs = Job::where('worker_id', $user->id)
    //                     ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
    //                     ->whereDate('start_date', now())
    //                     ->get();

    //                     $tomorrowJobs = Job::where('worker_id', $user->id)
    //                     ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
    //                     ->whereDate('start_date', now()->addDay(1))
    //                     ->get();

    //                     $todaySchedule = "";
    //                     $tomorrowSchedule = "";
    //                     if ($todayJobs && $todayJobs->count() > 0) {
    //                         foreach ($todayJobs as $job) {
    //                             Carbon::setLocale($lng == 'en' ? 'en' : 'he');
    //                             $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
    //                             if($job->service) {
    //                                 $todaySchedule .= $job->service->name . ', ';
    //                             }
    //                             $todaySchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
    //                             if($job->propertyAddress) {
    //                                 $todaySchedule .= $job->propertyAddress->geo_address . ', ';
    //                             }
    //                             if($job->client) {
    //                                 $todaySchedule .= $job->client->firstname . ' ' . $job->client->lastname;
    //                             }
    //                             $todaySchedule .= "\n";
    //                         }
    //                     }else{
    //                         if ($lng == 'heb') {
    //                             $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊û◊©◊®◊ï◊™ ◊î◊ô◊ï◊ù";
    //                         }else if($lng == 'spa'){
    //                             $reason = "No hay trabajos programados para hoy";
    //                         }else if($lng == 'ru'){
    //                             $reason = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç";
    //                         }else{
    //                             $reason = "No today jobs scheduled";
    //                         }
    //                         $todaySchedule = $reason;
    //                     }

    //                     if ($tomorrowJobs && $tomorrowJobs->count() > 0) {
    //                         foreach ($tomorrowJobs as $job) {
    //                             Carbon::setLocale($lng == 'en' ? 'en' : 'he');
    //                             $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
    //                             if($job->service) {
    //                                 $tomorrowSchedule .= $job->service->name . ', ';
    //                             }
    //                             $tomorrowSchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
    //                             if($job->propertyAddress) {
    //                                 $tomorrowSchedule .= $job->propertyAddress->geo_address . ', ';
    //                             }
    //                             if($job->client) {
    //                                 $tomorrowSchedule .= $job->client->firstname . ' ' . $job->client->lastname;
    //                             }
    //                             $tomorrowSchedule .= "\n";
    //                         }
    //                     }else{
    //                         if ($lng == 'heb') {
    //                             $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊¢◊ë◊ï◊ì◊ï◊™ ◊û◊ó◊®";
    //                         }else if($lng == 'spa'){
    //                             $reason = "No hay trabajos programados para ma√±ana";
    //                         }else if($lng == 'ru'){
    //                             $reason = "–ó–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç";
    //                         }else{
    //                             $reason = "No tomorrow jobs scheduled";
    //                         }
    //                         $tomorrowSchedule = $reason;
    //                     }
    //                     $nextMessage = str_replace(':today_schedule', $todaySchedule, $nextMessage);
    //                     $nextMessage = str_replace(':tomorrow_schedule', $tomorrowSchedule, $nextMessage);
    //                     sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);
    //                     $activeWorkerBot->delete();
    //                     break;

    //                 case 'attempts_exceeded':
    //                     // Handle attempts exceeded logic
    //                     $message = $this->activeWorkersbotMessages['attempts'][$lng];
    //                     sendClientWhatsappMessage($from, array('message' => $message));

    //                     // Notify the team
    //                     $nextMessage = $this->activeWorkersbotMessages['team_attempts']["heb"];
    //                     $workerName = "*".(($user->firstname ?? ''). ' ' . ($user->lastname ?? ''))."*";
    //                     $personalizedMessage = str_replace(':worker_name', $workerName, $nextMessage);
    //                     sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);
    //                     // Reset the cache
    //                     Cache::forget($cacheKey);
    //                     $activeWorkerBot->delete();

    //                     break;

    //                 default:
    //                     # code...
    //                     break;
    //             }
    //         }
    //     }
    // }


    public function MetaWhapifbActiveWorkersWebhookCurrentLive(Request $request)
    {
        // Check if request content is JSON (likely from Whapi)
        $content = $request->getContent();
        if ($this->isJson($content)) {
            \Log::info('Webhook received from Whapi');
            $this->WhapifbActiveWorkersWebhookCurrentLive($request);
        } else {
            \Log::info('Webhook received from Twilio');
            // Otherwise it's form-data (likely from Twilio)
            $this->fbActiveWorkersWebhookCurrentLive($request);
        }
    }

    public function WhapifbActiveWorkersWebhookCurrentLive(Request $request)
    {
        \Log::info('fbActiveWorkersWebhookCurrentLive');
        $get_data = $request->getContent();
        $data = json_decode($get_data, true);
        $messageId = $data_returned['messages'][0]['id'] ?? null;
        $lng = "en";
        $list = [];
        $buttons = [];

        // if (!$messageId) {
        //     return response()->json(['status' => 'Invalid message data'], 400);
        // }

        // // Check if the messageId exists in cache and matches
        // if (Cache::get('active_worker_processed_message_' . $messageId) === $messageId) {
        //     \Log::info('Already processed');
        //     return response()->json(['status' => 'Already processed'], 200);
        // }

        // // Store the messageId in the cache for 1 hour
        // Cache::put('active_worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if (
            isset($data['messages']) &&
            isset($data['messages'][0]['from_me']) &&
            $data['messages'][0]['from_me'] == false
        ) {
            $from = $data['messages'][0]['from'];
            $input = $data['messages'][0]['text']['body'] ?? "";
            $listId = isset($data['messages'][0]['reply']['list_reply']['id']) ? str_replace("ListV3:", "", $data['messages'][0]['reply']['list_reply']['id']) : "";
            \Log::info('From: ' . $from . ' Input: ' . $input . ' ListId: ' . $listId);
            $ButtonPayload = isset($data['messages'][0]['reply']['buttons_reply']['id']) ? str_replace("ButtonsV3:", "", $data['messages'][0]['reply']['buttons_reply']['id']) : $listId;
            \Log::info(" bhai whapi he");
            $lng = "heb";

            if (Str::endsWith($data['messages'][0]['chat_id'], '@g.us')) {
                die("Group message");
            }

            $user = User::where('phone', $from)
                ->where('status', 1)
                ->first();

            if ($user) {
                \Log::info('User found activeWorker: ' . $user->id);
            }

            if ($user && $user->stop_last_message == 1) {
                $lng = $user->lng;
                $last_menu = null;
                $send_menu = null;
                $sid = null;
                $activeWorkerBot = WhatsAppBotActiveWorkerState::where('worker_id', $user->id)->where('type', 'whapi')->first();

                if ($activeWorkerBot) {
                    $menu_option = explode('->', $activeWorkerBot->menu_option);
                    $last_menu = end($menu_option);
                }

                $cacheKey = 'send_menu_sorry_count_' . $from;

                // Initialize the cache if not already set
                if (!Cache::has($cacheKey)) {
                    Cache::put($cacheKey, 0, now()->addHours(24));
                }

                if ((empty($last_menu) && empty($ButtonPayload)) || in_array(strtolower($input), ["menu", "–º–µ–Ω—é", "◊™◊§◊®◊ô◊ò", "men√∫"])) {
                    $send_menu = 'main_menu';
                } else if ($last_menu == 'main_menu' && $input == '1') {
                    $send_menu = 'talk_to_manager';
                } else if ($last_menu == 'talk_to_manager' && !empty($input)) {
                    $send_menu = 'comment';
                } else if ($last_menu == 'main_menu' && $input == '2') {
                    $send_menu = 'change_schedule';
                } else if ($last_menu == 'change_schedule' && !empty($input)) {
                    $send_menu = 'change_schedule_comment';
                } else if ($last_menu == 'main_menu' && $input == '3') {
                    $send_menu = 'today_and_tomorrow_schedule';
                } else if ($last_menu == 'main_menu' && $input == '4') {
                    $send_menu = 'access_employee_portal';
                } else if ($ButtonPayload == 'seen_schedule') {
                    $send_menu = 'seen_schedule';
                } else if ($ButtonPayload == 'contact_manager') {
                    $send_menu = 'contact_manager';
                } else if ($last_menu == "contact_manager" && !empty($input)) {
                    $send_menu = 'contact_manager_comment';
                } else {
                    // Handle 'sorry' case
                    $send_menu = 'sorry';
                    $sorryCount = Cache::increment($cacheKey);
                    \Log::info('Sorry count: ' . $sorryCount);
                    if ($sorryCount > 4) {
                        Cache::put($cacheKey, 0, now()->addHours(24)); // Reset to 0 and keep the cache expiration
                        $send_menu = 'attempts_exceeded'; // Handle as 'attempts_exceeded'
                    } elseif ($sorryCount == 4) {
                        $send_menu = 'attempts_exceeded';
                    }
                }

                switch ($send_menu) {
                    case 'main_menu':
                        $initialMessage = $this->activeWorkersbotMessages['main_menu'][$lng];
                        WhatsAppBotActiveWorkerState::updateOrCreate(
                            [
                                "worker_id" => $user->id,
                                "type" => "whapi",
                            ],
                            [
                                'menu_option' => 'main_menu',
                                'lng' => $lng,
                            ]
                        );


                        // Replace :worker_name with the user's firstname and lastname
                        $workerName = "*" . trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? '')) . "*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $initialMessage);

                        // if ($user->lng == 'heb') {
                        //     $sid = 'HXfb2e6d4bb7951bd6a69cb57c607032bb';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HX95ed8770de994312a121061620a9933d';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HX371de9c7eaaef192fc3fe81140e5ad6a';
                        // } else {
                        //     $sid = 'HX6d60d866a1e260aad0588277667b1372';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             '1' => $workerName
                        //         ]),

                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        $list = [
                            'sections' => [
                                [
                                    'rows' => [
                                        [
                                            "id" => "1",
                                            "title" => $lng == "heb" ? "◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊©◊ô◊®◊ï◊™" : "Talk to manager urgently",
                                        ],
                                        [
                                            "id" => "2",
                                            "title" => $lng == "heb" ? "◊ê◊ñ◊ï◊®◊ô ◊©◊ô◊®◊ï◊™" : "Change my work schedule",
                                        ],
                                        [
                                            "id" => "3",
                                            "title" => $lng == "heb" ? "◊ß◊ë◊ô◊¢◊™ ◊§◊í◊ô◊©◊î" : "Schedule today/tomorrow?",
                                        ],
                                        [
                                            "id" => "4",
                                            "title" => $lng == "heb" ? "◊ê◊†◊ô ◊ú◊ß◊ï◊ó ◊ß◊ô◊ô◊ù" : "Access employee portal",
                                        ]
                                    ]
                                ]
                            ],
                            'label' => $lng == 'heb' ? '◊ë◊ó◊® ◊™◊§◊®◊ô◊ò' : 'Select Option'
                        ];

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $personalizedMessage, 'list' => [], 'buttons' => []));
                        StoreWebhookResponse($personalizedMessage, $from, $result, true);

                        break;

                    case 'talk_to_manager':
                        $nextMessage = $this->activeWorkersbotMessages['talk_to_manager'][$lng];

                        $title = $lng == "en" ? "Menu" : "◊™◊§◊®◊ô◊ò";
                        // $buttons = [
                        //     [
                        //         'type' => 'quick_reply',
                        //         'title' => $title,
                        //         'id' => 'menu',
                        //     ]
                        // ];

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $nextMessage, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($nextMessage, $from, $result, true);
                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "body" => $nextMessage,

                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        $activeWorkerBot->update(['menu_option' => 'main_menu->talk_to_manager', 'lng' => $lng]);

                        break;

                    case 'comment':
                        \Log::info('comment');
                        $nextMessage = $this->activeWorkersbotMessages['comment'][$lng];
                        $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $personalizedMessage, 'list' => $list, 'buttons' => []));
                        StoreWebhookResponse($personalizedMessage, $from, $result, true);
                        // if ($user->lng == 'heb') {
                        //     $sid = 'HXa57cdbf018f25ca83d3bf87b305c0c93';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HX6469d8d9794b5d5ab75471379455c3fe';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HXcbec2b9e02025331306d6ef385adff23';
                        // } else {
                        //     $sid = 'HX25f788ffb51c26d6ab5973c8cfc1fe53';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             "1" => $workerName,
                        //             "2" => trim($input)
                        //         ])
                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        if ($lng == 'heb') {
                            $reason = '◊¶◊®◊ï ◊ê◊ô◊™◊ô ◊ß◊©◊® ◊ì◊ó◊ï◊£';
                        } else if ($lng == 'ru') {
                            $reason = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —Å—Ä–æ—á–Ω–æ';
                        } else if ($lng == 'spa') {
                            $reason = 'Cont√°ctame urgentemente';
                        } else {
                            $reason = 'Contact me urgently';
                        }

                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = trim($input);
                        $scheduleChange->save();

                        $nextMessage = $this->activeWorkersbotMessages['team_comment']["en"];
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.problem_with_workers'), ['name' => '', 'message' => $personalizedMessage]);
                        $activeWorkerBot->delete();
                        break;

                    case 'change_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['change_schedule'][$lng];
                        $title = $lng == "en" ? "Menu" : "◊™◊§◊®◊ô◊ò";
                        // $buttons = [
                        //     [
                        //         'type' => 'quick_reply',
                        //         'title' => $title,
                        //         'id' => 'menu',
                        //     ]
                        // ];

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $nextMessage, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($nextMessage, $from, $result, true);
                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "body" => $nextMessage,

                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        $activeWorkerBot->update(['menu_option' => 'main_menu->change_schedule', 'lng' => $lng]);

                        break;

                    case 'change_schedule_comment':
                        if ($lng == 'heb') {
                            $reason = "◊©◊†◊î ◊ú◊ï◊ó ◊ñ◊û◊†◊ô◊ù";
                        } else if ($lng == 'spa') {
                            $reason = "Cambiar horario";
                        } else if ($lng == 'ru') {
                            $reason = "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
                        } else {
                            $reason = "Change Schedule";
                        }
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = $input;
                        $scheduleChange->save();

                        $nextMessage = $this->activeWorkersbotMessages['team_schedule_change']["en"];
                        $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);

                        $message = $this->activeWorkersbotMessages['change_schedule_comment'][$lng];
                        $message = str_replace([':message'], [$input], $message);

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $message, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($message, $from, $result, true);

                        // if ($user->lng == 'heb') {
                        //     $sid = 'HXf2b8715efecea4b55740e7f04c7656b8';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HX2c81729043db64e39ad6cda705e9d786';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HX2c81729043db64e39ad6cda705e9d786';
                        // } else {
                        //     $sid = 'HXb8c3eb8b5f3b946d18fc288165ef7cd0';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             "1" => trim($input)
                        //         ])
                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        $activeWorkerBot->delete();
                        break;

                    case 'access_employee_portal':
                        $nextMessage = $this->activeWorkersbotMessages['access_employee_portal'][$lng];
                        $personalizedMessage = str_replace(':link', generateShortUrl(url("worker/login"), 'worker'), $nextMessage);

                        $title = $lng == "en" ? "Menu" : "◊™◊§◊®◊ô◊ò";
                        // $buttons = [
                        //     [
                        //         'type' => 'quick_reply',
                        //         'title' => $title,
                        //         'id' => 'menu',
                        //     ]
                        // ];

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $personalizedMessage, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($personalizedMessage, $from, $result, true);

                        // if ($user->lng == 'heb') {
                        //     $sid = 'HX98bf3431b173310f6381032ebd227ace';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HXe3faeff57212e8181e6463b3ee432a3b';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HXa1110d7c89955ddb21d166152074c3bc';
                        // } else {
                        //     $sid = 'HX929da6f775cd8a2cc15fdcef32e62769';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             "1" => "worker/login"
                        //         ])
                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);
                        $activeWorkerBot->delete();
                        break;

                    case 'sorry':
                        $message = $this->activeWorkersbotMessages['sorry'][$lng];

                        $title = $lng == "en" ? "Menu" : "◊™◊§◊®◊ô◊ò";
                        // $buttons = [
                        //     [
                        //         'type' => 'quick_reply',
                        //         'title' => $title,
                        //         'id' => 'menu',
                        //     ]
                        // ];
                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $message, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($message, $from, $result, true);


                        // if ($user->lng == 'heb') {
                        //     $sid = 'HX4c481f10769a8a22d942f900e4623bb6';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HX970a1874a503822d4443ce5c58cccefb';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HX7d8e43ac45cb7088f3fa24a5e0ba5a16';
                        // } else {
                        //     $sid = 'HXa3dc5005a3421b1160162844e26235ec';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             "1" => trim($input)
                        //         ])
                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        break;

                    case 'today_and_tomorrow_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['today_and_tomorrow_schedule'][$lng];
                        $todayJobs = Job::where('worker_id', $user->id)
                            ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                            ->whereDate('start_date', now())
                            ->get();

                        $tomorrowJobs = Job::where('worker_id', $user->id)
                            ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                            ->whereDate('start_date', now()->addDay(1))
                            ->get();

                        $todaySchedule = "";
                        $tomorrowSchedule = "";
                        if ($todayJobs && $todayJobs->count() > 0) {
                            foreach ($todayJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if ($job->service) {
                                    $todaySchedule .= $job->service->name . ', ';
                                }
                                $todaySchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if ($job->propertyAddress) {
                                    $todaySchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if ($job->client) {
                                    $todaySchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $todaySchedule .= "\n";
                            }
                        } else {
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊û◊©◊®◊ï◊™ ◊î◊ô◊ï◊ù";
                            } else if ($lng == 'spa') {
                                $reason = "No hay trabajos programados para hoy";
                            } else if ($lng == 'ru') {
                                $reason = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç";
                            } else {
                                $reason = "No today jobs scheduled";
                            }
                            $todaySchedule = $reason;
                        }

                        if ($tomorrowJobs && $tomorrowJobs->count() > 0) {
                            foreach ($tomorrowJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if ($job->service) {
                                    $tomorrowSchedule .= $job->service->name . ', ';
                                }
                                $tomorrowSchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if ($job->propertyAddress) {
                                    $tomorrowSchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if ($job->client) {
                                    $tomorrowSchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $tomorrowSchedule .= "\n";
                            }
                        } else {
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊¢◊ë◊ï◊ì◊ï◊™ ◊û◊ó◊®";
                            } else if ($lng == 'spa') {
                                $reason = "No hay trabajos programados para ma√±ana";
                            } else if ($lng == 'ru') {
                                $reason = "–ó–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç";
                            } else {
                                $reason = "No tomorrow jobs scheduled";
                            }
                            $tomorrowSchedule = $reason;
                        }
                        $nextMessage = str_replace(':today_schedule', $todaySchedule, $nextMessage);
                        $nextMessage = str_replace(':tomorrow_schedule', $tomorrowSchedule, $nextMessage);

                        $title = $lng == "en" ? "Menu" : "◊™◊§◊®◊ô◊ò";
                        // $buttons = [
                        //     [
                        //         'type' => 'quick_reply',
                        //         'title' => $title,
                        //         'id' => 'menu',
                        //     ]
                        // ];
                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $nextMessage, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($nextMessage, $from, $result, true);

                        // if ($user->lng == 'heb') {
                        //     $sid = 'HX6b127de82fb4e7aae3432d4431e2306f';
                        // } else if ($user->lng == 'ru') {
                        //     $sid = 'HXc8c04d84c80604f6d7715c1ef82ef60e';
                        // } else if ($user->lng == 'spa') {
                        //     $sid = 'HX26ff074838d19f700928395e7b9478ef';
                        // } else {
                        //     $sid = 'HXd01a4e3a6b40b3fe11c9feb6bd711204';
                        // }

                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "contentSid" => $sid,
                        //         "contentVariables" => json_encode([
                        //             "1" => trim($todaySchedule),
                        //             "2" => trim($tomorrowSchedule)
                        //         ])
                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);
                        $activeWorkerBot->delete();
                        break;

                    case 'attempts_exceeded':
                        // Handle attempts exceeded logic
                        $message = $this->activeWorkersbotMessages['attempts'][$lng];
                        // $twi = $this->twilio->messages->create(
                        //     "whatsapp:+$from",
                        //     [
                        //         "from" => $this->twilioWhatsappNumber,
                        //         "body" => $message,

                        //     ]
                        // );
                        // \Log::info("twilio response" . $twi->sid);

                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $message, 'list' => $list, 'buttons' => $buttons));
                        StoreWebhookResponse($message, $from, $result, true);

                        // Notify the team
                        $nextMessage = $this->activeWorkersbotMessages['team_attempts']["heb"];
                        $workerName = "*" . trim(trim($user->firstname ?? '') . ' ' . ($user->lastname ?? '')) . "*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);
                        // Reset the cache
                        Cache::forget($cacheKey);
                        $activeWorkerBot->delete();

                        break;

                    case 'seen_schedule':
                        // Handle seen schedule logic
                        $msg = $this->activeWorkersbotMessages['seen_schedule'][$lng];

                        WhatsAppBotActiveWorkerState::updateOrCreate(
                            [
                                "worker_id" => $user->id,
                                "type" => "whapi",
                            ],
                            [
                                'menu_option' => 'seen_schedule',
                                'lng' => $lng,
                            ]
                        );
                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $msg, 'list' => [], 'buttons' => []));
                        StoreWebhookResponse($msg, $from, $result, true);

                        break;

                    case "contact_manager":
                        $msg = $this->activeWorkersbotMessages['contact_manager'][$lng];

                        WhatsAppBotActiveWorkerState::updateOrCreate(
                            [
                                "worker_id" => $user->id,
                                "type" => "whapi",
                            ],
                            [
                                'menu_option' => 'contact_manager',
                                'lng' => $lng,
                            ]
                        );
                        $result = sendWhatsappMessage($from, array('name' => '', 'message' => $msg, 'list' => [], 'buttons' => []));
                        StoreWebhookResponse($msg, $from, $result, true);
                        break;

                    case "contact_manager_comment":

                        $tomorrow = Carbon::tomorrow()->toDateString();

                        // Get all jobs for tomorrow where workers haven't been notified
                        $job = Job::query()
                            ->with(['worker', 'client'])
                            ->whereIn('worker_id', [$user->id])
                            ->whereNotNull('worker_id')
                            ->whereHas('worker')
                            ->whereNull('worker_approved_at')
                            ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                            ->whereDate('start_date', $tomorrow)
                            ->orderBy('start_time') // gets the earliest job for that day
                            ->get();


                        if ($lng == 'heb') {
                            $reason = "◊¶◊®◊ï ◊ê◊ô◊™◊ô ◊ß◊©◊® ◊ì◊ó◊ï◊£";
                        } else if ($lng == 'spa') {
                            $reason = "Cont√°ctame urgentemente";
                        } else if ($lng == 'ru') {
                            $reason = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —Å—Ä–æ—á–Ω–æ";
                        } else {
                            $reason = "Contact me urgently";
                        }
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = trim($input);
                        $scheduleChange->save();

                        $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));
                        $header = "◊î◊ï◊ì◊¢◊î ◊ë◊†◊ï◊í◊¢ ◊ú◊ê◊ô◊©◊ï◊® ◊õ◊™◊ï◊ë◊ï◊™ ◊û◊ó◊® ◊û◊ê◊™ {$workerName}:\n*{$input}*\n\n";

                        $jobDetails = '';

                        foreach ($job as $j) {
                            $clientPhone = $j->client->phone ?? 'N/A';
                            $workerPhone = $j->worker->phone ?? 'N/A';

                            $teamBtns = generateShortUrl(url("team-btn/" . base64_encode($j->uuid)), 'admin');

                            $jobDetails .=
                                "----\nüÖ∞ ◊ê◊©◊® ◊ë◊©◊ù ◊î◊¢◊ï◊ë◊ì ◊©◊®◊ê◊î ◊õ◊™◊ï◊ë◊™\n" .
                                "üÖ± ◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊®\n" .
                                "{$teamBtns}\n" .
                                "üÜë ◊ò◊ú◊§◊ï◊ü ◊©◊ú ◊î◊¢◊ï◊ë◊ì: {$workerPhone} | ◊ò◊ú◊§◊ï◊ü ◊©◊ú ◊î◊ú◊ß◊ï◊ó: {$clientPhone}\n" .
                                "\n\n";
                        }

                        $finalMessage = $header . $jobDetails;

                        sendTeamWhatsappMessage(config('services.whatsapp_groups.problem_with_workers'), [
                            'name' => '',
                            'message' => $finalMessage
                        ]);

                        break;

                    default:
                        # code...
                        break;
                }
            }
        }
    }

    public function fbActiveWorkersWebhookCurrentLive(Request $request)
    {
        \Log::info('fbActiveWorkersWebhookCurrentLive');
        $data = $request->all();
        \Log::info($data);
        $messageId = $data['SmsMessageSid'] ?? null;
        $lng = "en";

        if (!$messageId) {
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if (Cache::get('active_worker_processed_message_' . $messageId) === $messageId) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('active_worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if ($data['SmsStatus'] == 'received') {
            $from =  Str::replace('whatsapp:+', '', $data['From']) ?? null;
            $input = $data['Body'] ? trim($data['Body']) : "";
            $listId = $data['ListId'] ?? $input;
            \Log::info($listId);
            $ButtonPayload = $data['ButtonPayload'] ?? $listId;

            $status = $data['SmsStatus'] ?? null;
            $lng = "heb";

            // WorkerWebhookResponse::create([
            //     'status' => 1,
            //     'name' => 'whatsapp',
            //     'entry_id' => $data['SmsMessageSid'],
            //     'message' => $input,
            //     'number' => $from,
            //     'read' => 0,
            //     'flex' => 'W',
            //     'data' => json_encode($data)
            // ]);

            $user = User::where('phone', $from)
                ->where('status', 1)
                ->first();

            if ($user) {
                \Log::info('User found activeWorker: ' . $user->id);
            }

            if ($user && $user->stop_last_message == 1) {
                $lng = $user->lng;
                $last_menu = null;
                $send_menu = null;
                $sid = null;
                $activeWorkerBot = WhatsAppBotActiveWorkerState::where('worker_id', $user->id)->where('type', "meta")->first();

                if ($activeWorkerBot) {
                    $menu_option = explode('->', $activeWorkerBot->menu_option);
                    $last_menu = end($menu_option);
                }

                $cacheKey = 'send_menu_sorry_count_' . $from;

                // Initialize the cache if not already set
                if (!Cache::has($cacheKey)) {
                    Cache::put($cacheKey, 0, now()->addHours(24));
                }

                if (empty($last_menu) || in_array(strtolower($ButtonPayload), ["menu", "–º–µ–Ω—é", "◊™◊§◊®◊ô◊ò", "men√∫"])) {
                    $send_menu = 'main_menu';
                } else if ($last_menu == 'main_menu' && $ButtonPayload == '1') {
                    $send_menu = 'talk_to_manager';
                } else if ($last_menu == 'talk_to_manager' && !empty($input)) {
                    $send_menu = 'comment';
                } else if ($last_menu == 'main_menu' && $ButtonPayload == '2') {
                    $send_menu = 'change_schedule';
                } else if ($last_menu == 'change_schedule' && !empty($input)) {
                    $send_menu = 'change_schedule_comment';
                } else if ($last_menu == 'main_menu' && $ButtonPayload == '3') {
                    $send_menu = 'today_and_tomorrow_schedule';
                } else if ($last_menu == 'main_menu' && $ButtonPayload == '4') {
                    $send_menu = 'access_employee_portal';
                } else {
                    // Handle 'sorry' case
                    $send_menu = 'sorry';
                    $sorryCount = Cache::increment($cacheKey);
                    if ($sorryCount > 4) {
                        Cache::put($cacheKey, 0, now()->addHours(24)); // Reset to 0 and keep the cache expiration
                        $send_menu = 'attempts_exceeded'; // Handle as 'attempts_exceeded'
                    } elseif ($sorryCount == 4) {
                        $send_menu = 'attempts_exceeded';
                    }
                }

                switch ($send_menu) {
                    case 'main_menu':
                        $initialMessage = $this->activeWorkersbotMessages['main_menu'][$lng];
                        WhatsAppBotActiveWorkerState::updateOrCreate(
                            [
                                "worker_id" => $user->id,
                                "type" => "meta",
                            ],
                            [
                                'menu_option' => 'main_menu',
                                'lng' => $lng,
                            ]
                        );


                        // Replace :worker_name with the user's firstname and lastname
                        $workerName = "*" . trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? '')) . "*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $initialMessage);

                        if ($user->lng == 'heb') {
                            $sid = 'HXfb2e6d4bb7951bd6a69cb57c607032bb';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HX95ed8770de994312a121061620a9933d';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HX371de9c7eaaef192fc3fe81140e5ad6a';
                        } else {
                            $sid = 'HX6d60d866a1e260aad0588277667b1372';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    '1' => $workerName
                                ]),

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        break;

                    case 'talk_to_manager':
                        $nextMessage = $this->activeWorkersbotMessages['talk_to_manager'][$lng];

                        if ($user->lng == 'heb') {
                            $sid = 'HX21462b08db4af2bc8823c4496b29a120';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HXb6604e3ceec28caa3bf8b72d6d0f1e3b';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HXadae8f39705ef2142c0ce0c5f44156c0';
                        } else {
                            $sid = 'HX4f9b4992e812a43380137432d1462d20';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        $activeWorkerBot->update(['menu_option' => 'main_menu->talk_to_manager', 'lng' => $lng]);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        break;

                    case 'comment':
                        \Log::info('comment');
                        $nextMessage = $this->activeWorkersbotMessages['comment'][$lng];
                        $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);

                        if ($user->lng == 'heb') {
                            $sid = 'HXa57cdbf018f25ca83d3bf87b305c0c93';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HX6469d8d9794b5d5ab75471379455c3fe';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HXcbec2b9e02025331306d6ef385adff23';
                        } else {
                            $sid = 'HX25f788ffb51c26d6ab5973c8cfc1fe53';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    "1" => $workerName,
                                    "2" => trim($input)
                                ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);
                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());


                        if ($lng == 'heb') {
                            $reason = '◊¶◊®◊ï ◊ê◊ô◊™◊ô ◊ß◊©◊® ◊ì◊ó◊ï◊£';
                        } else if ($lng == 'ru') {
                            $reason = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —Å—Ä–æ—á–Ω–æ';
                        } else if ($lng == 'spa') {
                            $reason = 'Cont√°ctame urgentemente';
                        } else {
                            $reason = 'Contact me urgently';
                        }

                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = trim($input);
                        $scheduleChange->save();

                        $nextMessage = $this->activeWorkersbotMessages['team_comment']["en"];
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.problem_with_workers'), ['name' => '', 'message' => $personalizedMessage]);
                        $activeWorkerBot->delete();
                        break;

                    case 'change_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['change_schedule'][$lng];
                        if ($lng == 'heb') {
                            $sid = 'HXc2c7da48834dd9120e8d20b5b4acde8f';
                        } else if ($lng == 'ru') {
                            $sid = 'HX3ed8506b73820dc43a22dfbfad8f8319';
                        } else if ($lng == 'spa') {
                            $sid = 'HX57837eb5788867ce4226f13866adc86b';
                        } else {
                            $sid = 'HXdbe041a4725893e494aff248717f21c5';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        $activeWorkerBot->update(['menu_option' => 'main_menu->change_schedule', 'lng' => $lng]);

                        break;

                    case 'change_schedule_comment':
                        if ($lng == 'heb') {
                            $reason = "◊©◊†◊î ◊ú◊ï◊ó ◊ñ◊û◊†◊ô◊ù";
                        } else if ($lng == 'spa') {
                            $reason = "Cambiar horario";
                        } else if ($lng == 'ru') {
                            $reason = "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
                        } else {
                            $reason = "Change Schedule";
                        }
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = $input;
                        $scheduleChange->save();

                        $nextMessage = $this->activeWorkersbotMessages['team_schedule_change']["en"];
                        $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);

                        $message = $this->activeWorkersbotMessages['change_schedule_comment'][$lng];
                        $message = str_replace([':message'], [$input], $message);

                        if ($user->lng == 'heb') {
                            $sid = 'HXf2b8715efecea4b55740e7f04c7656b8';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HX2c81729043db64e39ad6cda705e9d786';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HX2c81729043db64e39ad6cda705e9d786';
                        } else {
                            $sid = 'HXb8c3eb8b5f3b946d18fc288165ef7cd0';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    "1" => trim($input)
                                ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        $activeWorkerBot->delete();
                        break;

                    case 'access_employee_portal':
                        $nextMessage = $this->activeWorkersbotMessages['access_employee_portal'][$lng];
                        $personalizedMessage = str_replace(':link', generateShortUrl(url("worker/login"), 'worker'), $nextMessage);

                        if ($user->lng == 'heb') {
                            $sid = 'HX98bf3431b173310f6381032ebd227ace';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HXe3faeff57212e8181e6463b3ee432a3b';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HXa1110d7c89955ddb21d166152074c3bc';
                        } else {
                            $sid = 'HX929da6f775cd8a2cc15fdcef32e62769';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    "1" => "worker/login"
                                ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        $activeWorkerBot->delete();
                        break;

                    case 'sorry':
                        $message = $this->activeWorkersbotMessages['sorry'][$lng];
                        if ($user->lng == 'heb') {
                            $sid = 'HX4c481f10769a8a22d942f900e4623bb6';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HX970a1874a503822d4443ce5c58cccefb';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HX7d8e43ac45cb7088f3fa24a5e0ba5a16';
                        } else {
                            $sid = 'HXa3dc5005a3421b1160162844e26235ec';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    "1" => trim($input)
                                ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        break;

                    case 'today_and_tomorrow_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['today_and_tomorrow_schedule'][$lng];
                        $todayJobs = Job::where('worker_id', $user->id)
                            ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                            ->whereDate('start_date', now())
                            ->get();

                        $tomorrowJobs = Job::where('worker_id', $user->id)
                            ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                            ->whereDate('start_date', now()->addDay(1))
                            ->get();

                        $todaySchedule = "";
                        $tomorrowSchedule = "";
                        if ($todayJobs && $todayJobs->count() > 0) {
                            foreach ($todayJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if ($job->service) {
                                    $todaySchedule .= $job->service->name . ', ';
                                }
                                $todaySchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if ($job->propertyAddress) {
                                    $todaySchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if ($job->client) {
                                    $todaySchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $todaySchedule .= "\n";
                            }
                        } else {
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊û◊©◊®◊ï◊™ ◊î◊ô◊ï◊ù";
                            } else if ($lng == 'spa') {
                                $reason = "No hay trabajos programados para hoy";
                            } else if ($lng == 'ru') {
                                $reason = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç";
                            } else {
                                $reason = "No today jobs scheduled";
                            }
                            $todaySchedule = $reason;
                        }

                        if ($tomorrowJobs && $tomorrowJobs->count() > 0) {
                            foreach ($tomorrowJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if ($job->service) {
                                    $tomorrowSchedule .= $job->service->name . ', ';
                                }
                                $tomorrowSchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if ($job->propertyAddress) {
                                    $tomorrowSchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if ($job->client) {
                                    $tomorrowSchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $tomorrowSchedule .= "\n";
                            }
                        } else {
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊¢◊ë◊ï◊ì◊ï◊™ ◊û◊ó◊®";
                            } else if ($lng == 'spa') {
                                $reason = "No hay trabajos programados para ma√±ana";
                            } else if ($lng == 'ru') {
                                $reason = "–ó–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç";
                            } else {
                                $reason = "No tomorrow jobs scheduled";
                            }
                            $tomorrowSchedule = $reason;
                        }
                        $nextMessage = str_replace(':today_schedule', $todaySchedule, $nextMessage);
                        $nextMessage = str_replace(':tomorrow_schedule', $tomorrowSchedule, $nextMessage);

                        if ($user->lng == 'heb') {
                            $sid = 'HXcbbc6dae7494449730df75f31b7f70c0';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HX105bf1d6864a30cb634457f6d17d6bba';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HXc3946c71996268e6de36901a99c17326';
                        } else {
                            $sid = 'HXa3c8dd0a5f466f0e47d1b94d0a4268bb';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                "contentVariables" => json_encode([
                                    "1" => trim($todaySchedule),
                                    "2" => trim($tomorrowSchedule)
                                ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);
                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        $activeWorkerBot->delete();
                        break;

                    case 'attempts_exceeded':
                        // Handle attempts exceeded logic
                        $message = $this->activeWorkersbotMessages['attempts'][$lng];
                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "body" => $message,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        // Notify the team
                        $nextMessage = $this->activeWorkersbotMessages['team_attempts']["heb"];
                        $workerName = "*" . trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? '')) . "*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);
                        // Reset the cache
                        Cache::forget($cacheKey);
                        $activeWorkerBot->delete();

                        break;

                    default:
                        # code...
                        break;
                }
            } else if ($user && $user->stop_last_message == 0) {
                $this->activeWorkersMonday($request);
            }
        }
    }

    public function activeWorkersMonday(Request $request)
    {
        $data = $request->all();
        \Log::info($data);
        $messageId = $data['SmsMessageSid'] ?? null;
        $lng = "en";

        if (!$messageId) {
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if (Cache::get('worker_monday_processed_message_' . $messageId) === $messageId) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('worker_monday_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if ($data['SmsStatus'] == 'received') {

            $from =  Str::replace('whatsapp:+', '', $data['From']) ?? null;
            $input = $data['Body'] ? trim($data['Body']) : "";
            $listId = $data['ListId'] ?? $input;
            $ButtonPayload = $data['ButtonPayload'] ?? $listId;

            $status = $data['SmsStatus'] ?? null;

            $user = User::where('phone', $from)
                ->where('status', 1)
                ->first();

            if ($user && $user->stop_last_message == 0) {
                $m = null;
                $workerName = trim(trim($user->firstname ?? '') . ' ' . trim($user->lastname ?? ''));

                $msgStatus = Cache::get('worker_monday_msg_status_' . $user->id);

                if (empty($msgStatus)) {
                    $msgStatus = 'main_monday_msg';
                }

                if (!empty($msgStatus)) {
                    $menu_option = explode('->', $msgStatus);
                    $messageBody = $input;
                    $last_menu = end($menu_option);

                    if ($last_menu == 'main_monday_msg' && $ButtonPayload == '1') {
                        // Send appropriate message
                        if ($user->lng == 'heb') {
                            $m = "◊û◊î◊ï ◊î◊©◊ô◊†◊ï◊ô ◊©◊ê◊™◊î ◊û◊ë◊ß◊© ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê? ◊™◊©◊ï◊ë◊™◊ö ◊™◊ï◊¢◊ë◊® ◊ú◊¶◊ï◊ï◊™.";
                        } else if ($user->lng == 'ru') {
                            $m = "–ö–∞–∫–∏–µ —É –≤–∞—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é? –í–∞—à –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ.";
                        } else if ($user->lng == 'en') {
                            $m = "What is your change for next week? Your response will be forwarded to the team.";
                        } else {
                            $m = "¬øCu√°l es tu cambio para la pr√≥xima semana? Tu respuesta ser√° enviada al equipo.";
                        }


                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "body" => $m,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        Cache::put('worker_monday_msg_status_' . $user->id, 'next_week_change', now()->addDay(1));

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());
                    } else if ($last_menu == 'main_monday_msg' && ($messageBody == '2' || $ButtonPayload == '2')) {


                        $message = null;

                        if ($user->lng == 'heb') {
                            $message = '◊©◊ú◊ï◊ù ' . $workerName . ',\n◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊™◊í◊ï◊ë◊™◊ö. ◊ê◊ô◊ü ◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê.\n\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ';
                        } else if ($user->lng == 'ru') {
                            $message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '  . $workerName . ',\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç. –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ';
                        } else {
                            $message = 'Hello '  . $workerName . ',\nWe received your response. There are no changes to your schedule for next week.\n\nBest Regards,\nBroom Service Team üåπ ';
                        }


                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "body" => $message,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        Cache::forget('worker_monday_msg_status_' . $user->id);
                        WorkerMetas::where('worker_id', $user->id)->where('key', 'monday_msg_sent')->delete();
                        $user->stop_last_message = 1;
                        $user->save();
                    } else if ($last_menu == 'next_week_change' && !empty($messageBody)) {
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $user->lng == "en" ? "Change or update schedule" : '◊©◊ô◊†◊ï◊ô ◊ê◊ï ◊¢◊ì◊õ◊ï◊ü ◊©◊ô◊ë◊ï◊•';
                        $scheduleChange->comments = $messageBody;
                        $scheduleChange->save();

                        $personalizedMessage = "◊©◊ú◊ï◊ù ◊¶◊ï◊ï◊™,\n" . $workerName . " ◊ë◊ô◊ß◊© ◊ú◊ë◊¶◊¢ ◊©◊ô◊†◊ï◊ô ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ï ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê.\n◊î◊ë◊ß◊©◊î ◊©◊ú◊ï ◊î◊ô◊ê:\n\"" . $messageBody . "\"\n◊ê◊†◊ê ◊ë◊ì◊ß◊ï ◊ï◊ò◊§◊ú◊ï ◊ë◊î◊™◊ê◊ù.\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊°";

                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);

                        $message = null;

                        if ($user->lng == 'heb') {
                            $message = '◊©◊ú◊ï◊ù ' . $workerName . ',\n◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊™◊í◊ï◊ë◊™◊ö. ◊ë◊ß◊©◊™◊ö ◊ú◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊î◊™◊ß◊ë◊ú◊î ◊ï◊î◊ï◊¢◊ë◊®◊î ◊ú◊¶◊ï◊ï◊™ ◊©◊ú◊†◊ï ◊ú◊ë◊ì◊ô◊ß◊î ◊ï◊ò◊ô◊§◊ï◊ú.\n\n◊ú◊î◊ú◊ü ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö:\n"' . $scheduleChange->comments . '"\n\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ';
                        } else if ($user->lng == 'ru') {
                            $message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '  . $workerName . ',
–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–í–æ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:
"' . $scheduleChange->comments . '"

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ';
                        } else {
                            $message = 'Hello '  . $workerName . ',
We received your response. Your request for changes to your schedule has been received and forwarded to our team for review and action.

Here‚Äôs your request:
"' . $scheduleChange->comments . '"

Best Regards,
Broom Service Team üåπ ';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "body" => $message,

                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());

                        Cache::forget('worker_monday_msg_status_' . $user->id);
                        WorkerMetas::where('worker_id', $user->id)->where('key', 'monday_msg_sent')->delete();
                        $user->stop_last_message = 1;
                        $user->save();
                    } else {
                        // Follow-up message for returning to the menu, with translation based on the client's language
                        if ($user->lng == 'heb') {
                            $follow_up_msg = "◊û◊¶◊ò◊¢◊®◊ô◊ù, ◊ú◊ê ◊î◊ë◊†◊ï. ◊ê◊†◊ê ◊î◊©◊ë ◊¢◊ù ◊î◊°◊§◊®◊î 1 ◊ê◊ù ◊ô◊© ◊ú◊ö ◊©◊ô◊†◊ï◊ô◊ô◊ù, ◊ê◊ï 2 ◊ê◊ù ◊î◊°◊ô◊ì◊ï◊® ◊†◊©◊ê◊® ◊õ◊§◊ô ◊©◊î◊ô◊î.\n\n◊ê◊ù ◊ú◊ê ◊™◊™◊ß◊ë◊ú ◊™◊©◊ï◊ë◊î ◊™◊ï◊ö 5 ◊©◊¢◊ï◊™, ◊î◊†◊ï◊©◊ê ◊ô◊ï◊¢◊ë◊® ◊ú◊ò◊ô◊§◊ï◊ú ◊î◊¶◊ï◊ï◊™.\n\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ";
                        } else if ($user->lng == 'ru') {
                            $follow_up_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ 1, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–ª–∏ 2, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤, –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–µ.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ";
                        } else if ($user->lng == 'en') {
                            $follow_up_msg = "Sorry, I didn‚Äôt quite understand that. Please reply with the number 1 if you have changes or 2 if your schedule remains the same.\n\nIf no response is received within 5 hours, the issue will be escalated to the team.\n\nBest Regards,\nBroom Service Team üåπ";
                        } else {
                            $follow_up_msg = "Sorry, I didn‚Äôt quite understand that. Please reply with the number 1 if you have changes or 2 if your schedule remains the same.\n\nIf no response is received within 5 hours, the issue will be escalated to the team.\n\nBest Regards,\nBroom Service Team üåπ";
                        }

                        if ($user->lng == 'heb') {
                            $sid = 'HXc67d7e37adca24d7a05e09dff74c7e1a';
                        } else if ($user->lng == 'ru') {
                            $sid = 'HXc8db59a575fcd5104a659b758e5e3fc1';
                        } else if ($user->lng == 'spa') {
                            $sid = 'HX8168e5915abd7c464c0afc1a1b881079';
                        } else {
                            $sid = 'HXc431d620e4063a0f80527acce896ecff';
                        }

                        $twi = $this->twilio->messages->create(
                            "whatsapp:+$from",
                            [
                                "from" => $this->twilioWhatsappNumber,
                                "contentSid" => $sid,
                                // "contentVariables" => json_encode([
                                //     "1" => trim($todaySchedule),
                                //     "2" => trim($tomorrowSchedule)
                                // ])
                            ]
                        );
                        \Log::info("twilio response" . $twi->sid);

                        StoreWebhookResponse($twi->body ?? '', $from, $twi->toArray());
                    }
                }
            }
        }
    }

    public function processWorkerResponse($workerLead, $input, $currentStep, $workerState)
    {
        $messages = $this->botMessages;
        $lng = $workerState->language ? $workerState->language : 'en';
        $response = strtolower(trim($input));

        // Check if user wants to speak to representative
        if (in_array($response, ['representative', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '◊†◊¶◊ô◊í'])) {
            $workerLead->status = 'want-to-speak-representative';
            $workerLead->save();
            
            // Send notification to team
            $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::LEAD_NEED_HUMAN_REPRESENTATIVE);
            
            // Send confirmation message to worker
            $message = $messages['speak_to_representative'][$lng] ?? $messages['speak_to_representative']['en'];
            
            $twi = $this->twilio->messages->create(
                "whatsapp:+$workerLead->phone",
                [
                    "from" => $this->twilioWorkerLeadWhatsappNumber,
                    "body" => $message,
                ]
            );
            
            \Log::info("Representative request - twilio response: " . $twi->sid);
            
            // Update worker state to completed
            $workerState->step = 4;
            $workerState->save();
            
            return $twi;
        }

        switch ($currentStep) {
            case 0:
                if ($input == "yes") {
                    $workerLead->experience_in_house_cleaning = true;
                    $workerState->step = 1;
                    $workerState->save();
                    $workerLead->save();

                    $sid = $lng == "ru" ? "HX78f4491dca237fc9d526c4ed6bdc3782" : "HX158b195044a2fe87cf1855c7ff90de09";

                    $twi = $this->twilio->messages->create(
                        "whatsapp:+$workerLead->phone",
                        [
                            "from" => $this->twilioWorkerLeadWhatsappNumber,
                            "contentSid" => $sid,

                        ]
                    );
                    \Log::info("twilio response" . $twi->sid);

                    return $twi;
                } elseif ($input == "no") {
                    $workerLead->experience_in_house_cleaning = false;
                    $workerState->step = 1;
                    $workerState->save();
                    $workerLead->save();

                    $sid = $lng == "ru" ? "HX78f4491dca237fc9d526c4ed6bdc3782" : "HX158b195044a2fe87cf1855c7ff90de09";

                    $twi = $this->twilio->messages->create(
                        "whatsapp:+$workerLead->phone",
                        [
                            "from" => $this->twilioWorkerLeadWhatsappNumber,
                            "contentSid" => $sid,

                        ]
                    );
                    \Log::info("twilio response" . $twi->sid);

                    return $twi;
                } else {
                    $workerState->step = 0;
                    $workerState->save();

                    $sid = $lng == 'ru' ? 'HX815f6780363af98516b549254a2f7958' : 'HXa8ebb4eec38a019b248aa176fac5088e';

                    $twi = $this->twilio->messages->create(
                        "whatsapp:+$workerLead->phone",
                        [
                            "from" => $this->twilioWorkerLeadWhatsappNumber,
                            "contentSid" => $sid,

                        ]
                    );
                    \Log::info("twilio response" . $twi->sid);

                    return $twi;
                }

            case 1:
                if ($input == "yes") {
                    $workerLead->you_have_valid_work_visa = true;
                    $workerLead->save();
                    return $this->sendMessageToTeamOrLead($workerLead, $input);
                } elseif ($input == "no") {
                    $workerLead->you_have_valid_work_visa = false;
                    $workerLead->save();
                    return $this->sendMessageToTeamOrLead($workerLead, $input);
                } else {
                    $sid = $lng == "ru" ? "HXd72fdbd778950fad6c176fe38962b353" : "HXcc15b8cf7729e4854efa3893271b4b37";

                    $twi = $this->twilio->messages->create(
                        "whatsapp:+$workerLead->phone",
                        [
                            "from" => $this->twilioWorkerLeadWhatsappNumber,
                            "contentSid" => $sid,

                        ]
                    );
                    \Log::info("twilio response" . $twi->sid);
                    return $twi;
                }

            case 2:
                $this->sendMessageToTeamOrLead($workerLead, $input);
        }
    }

    protected function sendMessageToTeamOrLead($workerLead, $input)
    {
        if ($workerLead->you_have_valid_work_visa) {

            $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::NEW_LEAD_FOR_HIRING_TO_TEAM);

            WhatsAppBotWorkerState::updateOrCreate(
                ['worker_lead_id' => $workerLead->id],
                ['step' => 4]
            );
        } else {
            $workerLead = WorkerLeads::find($workerLead->id);
            $workerLead->status = "not-hired";
            $workerLead->save();

            $receiverNumber = $workerLead->phone;
            $lng = $workerLead->lng;

            // $resp = $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::FINAL_MESSAGE_IF_NO_TO_LEAD);

            if ($lng == "heb") {
                $sid = "HX492d26962fe009a4b25157f5fd8bc226";
            } elseif ($lng == "ru") {
                $sid = "HX8de41c8b676432f67d3aefd96f7b8648";
            } else {
                $sid = "HXa2369d2bfc34c47637bb42c319197ea4";
            }

            $twi = $this->twilio->messages->create(
                "whatsapp:+" . $receiverNumber,
                [
                    "from" => $this->twilioWorkerLeadWhatsappNumber,
                    "contentSid" => $sid
                ]
            );

            \Log::info($twi->sid);

            WorkerWebhookResponse::create([
                'status' => 1,
                'name' => 'whatsapp',
                'message' => $twi->body ?? '',
                'from' => $this->twilioWorkerLeadWhatsappNumber,
                'number' => $receiverNumber,
                'read' => 1,
                'flex' => 'A',
                'data' => json_encode($twi->toArray()),
            ]);

            WhatsAppBotWorkerState::updateOrCreate(
                ['worker_lead_id' => $workerLead->id],
                ['step' => 4]
            );
        }
    }


    public function detectLanguage($text)
    {
        // Regex for Russian (Cyrillic)
        if (preg_match('/[\x{0400}-\x{04FF}]/u', $text)) {
            return 'ru';
        } else {
            return 'en';
        }

        // else if (preg_match('/[a-zA-Z]/', $text)) {
        //     return 'en';
        // } else {
        //     return 'heb';
        // }
    }

    protected function sendWhatsAppMessage($workerLead, $enum)
    {
        event(new WhatsappNotificationEvent([
            "type" => $enum,
            "notificationData" => [
                'worker' => $workerLead->toArray(),
            ]
        ]));
    }


    public function isWeekend($date)
    {
        $weekDay = date('w', strtotime($date));
        return ($weekDay == 5 || $weekDay == 6);
    }

    public function createUser($workerLead)
    {
        $role = $workerLead->role ?? 'cleaner';
        $lng = $workerLead->lng;

        if ($role == 'cleaner') {
            $role = match ($lng) {
                'heb' => "◊û◊†◊ß◊î",
                'en' => "Cleaner",
                'ru' => "—É–±–æ—Ä—â–∏–∫",
                default => "limpiador"
            };
        } elseif ($role == 'general_worker') {
            $role = match ($lng) {
                'heb' => "◊¢◊ï◊ë◊ì ◊õ◊ú◊ú◊ô",
                'en' => "General worker",
                'ru' => "–û–±—â–∏–π —Ä–∞–±–æ—á–∏–π",
                default => "Trabajador general"
            };
        }

        // Create new user
        $worker = User::create([
            'firstname' => $workerLead->firstname ?? '',
            'lastname' => $workerLead->lastname ?? '',
            'phone' => $workerLead->phone ?? null,
            'email' => $workerLead->email ?? null,
            'gender' => $workerLead->gender ?? null,
            'first_date' => $workerLead->first_date ?? null,
            'role' => $role ?? null,
            'lng' => $lng ?? "en",
            'passcode' => $workerLead->phone ?? null,
            'password' => Hash::make($workerLead->phone),
            'company_type' => $workerLead->company_type ?? "my-company",
            'visa' => $workerLead->visa ?? NULL,
            'passport' => $workerLead->passport ?? NULL,
            'passport_card' => $workerLead->passport_card ?? NULL,
            'id_number' => $workerLead->id_number ?? NULL,
            'status' => 1,
            'is_afraid_by_cat' => $workerLead->is_afraid_by_cat == 1 ? 1 : 0,
            'is_afraid_by_dog' => $workerLead->is_afraid_by_dog == 1 ? 1 : 0,
            'renewal_visa' => $workerLead->renewal_visa ?? NULL,
            'address' => $workerLead->address ?? NULL,
            'latitude' => $workerLead->latitude ?? NULL,
            'longitude' => $workerLead->longitude ?? NULL,
            'manpower_company_id' => $workerLead->company_type == "manpower" ? $workerLead->manpower_company_id : NULL,
            'two_factor_enabled' => 1,
            'step' => $workerLead->step ?? 0
        ]);

        $i = 1;
        $j = 0;
        $check_friday = 1;
        while ($i == 1) {
            $current = Carbon::now();
            $day = $current->addDays($j);
            if ($this->isWeekend($day->toDateString())) {
                $check_friday++;
            } else {
                $w_a = new WorkerAvailability;
                $w_a->user_id = $worker->id;
                $w_a->date = $day->toDateString();
                $w_a->start_time = '08:00:00';
                $w_a->end_time = '17:00:00';
                $w_a->status = 1;
                $w_a->save();
            }
            $j++;
            if ($check_friday == 6) {
                $i = 2;
            }
        }


        $forms = $workerLead->forms()->get();
        foreach ($forms as $form) {
            $form->update([
                'user_type' => User::class,
                'user_id' => $worker->id
            ]);
        }

        $workerLead->delete();

        return $worker;
    }
}
