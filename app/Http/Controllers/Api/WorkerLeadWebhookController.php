<?php

namespace App\Http\Controllers\Api;

use App\Enums\LeadStatusEnum;
use App\Enums\NotificationTypeEnum;
use App\Enums\JobStatusEnum;
use App\Enums\WhatsappMessageTemplateEnum;
use App\Events\WhatsappNotificationEvent;
use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Client;
use App\Models\Job;
use App\Jobs\SendMeetingMailJob;
use App\Models\Offer;
use App\Models\WorkerWebhookResponse;
use App\Models\WhatsAppBotWorkerState;
use App\Models\Notification;
use App\Models\WorkerMetas;
use App\Models\WorkerLeads;
use App\Models\ScheduleChange;
use App\Models\ManpowerCompany;
use App\Models\WhatsAppBotActiveWorkerState;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;


class WorkerLeadWebhookController extends Controller
{

    protected $botMessages = [
        'step0' => [
            'en' => "üåü Thank you for contacting Job4Service! üåü\n\nWe are hiring house cleaning professionals for part-time and full-time positions in the Tel Aviv area.\n\n‚úÖ To apply, you must have one of the following:\n- Israeli ID\n- B1 Work Visa\n- Refugee (blue) visa\n\nPlease answer these two questions to proceed:\n1. Do you have experience in house cleaning?\n(Please reply with 'Yes' or 'No')",
            'ru' => "üåü –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–≤—è–∑–∞–ª–∏—Å—å —Å Job4Service! üåü\n\n–ú—ã –∏—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–±–æ—Ä–∫–∏ –¥–æ–º–æ–≤ –Ω–∞ –ø–æ–ª–Ω—É—é –∏ —á–∞—Å—Ç–∏—á–Ω—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å –≤ —Ä–∞–π–æ–Ω–µ –¢–µ–ª—å-–ê–≤–∏–≤–∞.\n‚úÖ –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n- –ò–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏\n- –†–∞–±–æ—á–∞—è –≤–∏–∑–∞ B1\n- –°—Ç–∞—Ç—É—Å –±–µ–∂–µ–Ω—Ü–∞ (—Å–∏–Ω—è—è –≤–∏–∑–∞)\n\n–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞:\n1. –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —É–±–æ—Ä–∫–µ –¥–æ–º–æ–≤?\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.)",
       ],
        'step1' => [
            'en' => "We didn‚Äôt quite understand your answer.\n\n‚úÖ Please respond clearly with:\n\n1. \"Yes\" or \"No\" ‚Äì Do you have experience in house cleaning?\n\nLet‚Äôs continue when you‚Äôre ready! üòä",
            'ru' => "–ú—ã –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç.\n\n‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ç–∫–æ:\n\n1. \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" ‚Äì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —É–±–æ—Ä–∫–µ?\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üòä  ",
        ],
        'step2' => [
            'en' => "2. Do you have a valid visa or ID as mentioned above?\n(Please reply with 'Yes' or 'No')",
            'ru' => "2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏?\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.)",
        ],
        'step3' => [
            'en' => "We didn‚Äôt quite understand your answer.\n\n‚úÖ Please respond clearly with:\n\n2. \"Yes\" or \"No\" ‚Äì Do you have a valid work visa (Israeli ID, B1 visa, or refugee visa)?\n\nLet‚Äôs continue when you‚Äôre ready! üòä",
            'ru' => "–ú—ã –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç.\n\n‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ç–∫–æ:\n\n2. \"–î–∞\" –∏–ª–∏ \"–ù–µ—Ç\" ‚Äì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ (–∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ, –≤–∏–∑–∞ B1 –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –±–µ–∂–µ–Ω—Ü–∞)?\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üòä",
        ],
    ];

    protected $activeWorkersbotMessages = [
        'main_menu' => [
            'en' => "Hi, :worker_name!\nWelcome to Gali, the Broom Service digital assistant bot.\nHow can I assist you today? üåü\n\n1Ô∏è‚É£ Talk to a manager urgently.\n2Ô∏è‚É£ Change my work schedule.\n3Ô∏è‚É£ What's my schedule for today and tomorrow?\n4Ô∏è‚É£ Access the employee portal.\n\nAt any time, you can return to the main menu by typing 'Menu'.\nPlease reply with the number of your choice.",
            'heb' => "◊î◊ô◊ô, :worker_name!\n◊ë◊®◊ï◊ö ◊î◊ë◊ê ◊ú◊í◊ú◊ô, ◊î◊ë◊ï◊ò ◊î◊ì◊ô◊í◊ô◊ò◊ú◊ô ◊©◊ú ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊°.\n◊ê◊ô◊ö ◊ê◊§◊©◊® ◊ú◊¢◊ñ◊ï◊® ◊ú◊ö ◊î◊ô◊ï◊ù? üåü\n\n1Ô∏è‚É£ ◊ú◊ì◊ë◊® ◊¢◊ù ◊û◊†◊î◊ú ◊ë◊ì◊ó◊ô◊§◊ï◊™.\n2Ô∏è‚É£ ◊©◊ô◊†◊ï◊ô ◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ô.\n3Ô∏è‚É£ ◊û◊î ◊î◊ú◊ï◊ñ ◊©◊ú◊ô ◊ú◊î◊ô◊ï◊ù ◊ï◊ú◊û◊ó◊®?\n4Ô∏è‚É£ ◊í◊ô◊©◊î ◊ú◊§◊ï◊®◊ò◊ú ◊î◊¢◊ï◊ë◊ì◊ô◊ù ◊©◊ú◊†◊ï.\n\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.\n◊†◊ê ◊ú◊î◊©◊ô◊ë ◊¢◊ù ◊î◊û◊°◊§◊® ◊î◊û◊™◊ê◊ô◊ù.",
            'ru' => "–ü—Ä–∏–≤–µ—Ç, :worker_name!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞–ª–∏, —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–æ—Ç Broom Service.\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? üåü\n\n1Ô∏è‚É£ –°—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.\n3Ô∏è‚É£ –ö–∞–∫–æ–µ —É –º–µ–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞?\n4Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.",
            'spa' => "Hola, :worker_name!\nBienvenido a Gali, el bot asistente digital de Broom Service.\n¬øC√≥mo puedo ayudarte hoy? üåü\n\n1Ô∏è‚É£ Habla con un gerente urgentemente.\n2Ô∏è‚É£ Cambia mi horario de trabajo.\n3Ô∏è‚É£ ¬øCu√°l es mi horario para hoy y ma√±ana?\n4Ô∏è‚É£ Accede al portal de empleados.\n\nEn cualquier momento, puedes regresar al men√∫ principal escribiendo 'Men√∫'.\nResponde con el n√∫mero de tu elecci√≥n.",
        ],
        'talk_to_manager' => [
            'en' => "Please tell us the reason for contacting a manager. Your request will be forwarded to the relevant team.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊ê◊†◊ê ◊§◊®◊ò ◊ê◊™ ◊î◊°◊ô◊ë◊î ◊©◊ë◊í◊ú◊ú◊î ◊™◊®◊¶◊î ◊ú◊ì◊ë◊® ◊¢◊ù ◊û◊†◊î◊ú. ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö ◊™◊ï◊¢◊ë◊® ◊ú◊¶◊ï◊ï◊™ ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Por favor, indica la raz√≥n de la llamada. Tu solicitud se enviar√° a la equipo relevante.\nEn cualquier momento, puedes regresar al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'comment' => [
            'en' => "Hello :worker_name,\nWe received your message:\n\n':message'\n\nYour request has been forwarded to the relevant manager for further handling.",
            'heb' => "◊©◊ú◊ï◊ù :worker_name,\n◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊î◊î◊ï◊ì◊¢◊î ◊©◊ú◊ö:\n\n':message'\n\n◊î◊ë◊ß◊©◊î ◊©◊ú◊ö ◊î◊ï◊¢◊ë◊®◊î ◊ú◊û◊†◊î◊ú ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ú◊î◊û◊©◊ö ◊ò◊ô◊§◊ï◊ú.",
            'ru' => "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, :worker_name,\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n':message'\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            'spa' => "Hola, :worker_name,\nRecibimos tu mensaje:\n\n':message'\n\nTu solicitud ha sido enviada al gerente relevante para su posterior tratamiento.",
        ],
        'team_comment' => [
            'en' => "üö® :worker_name requested to speak to a manager urgently. \nReason: :message. \nPlease contact them immediately.",
        ],
        'change_schedule' => [
            'en' => "Please share the changes you'd like to make to your schedule. We will review your request and get back to you.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊ê◊†◊ê ◊¢◊ì◊õ◊ü ◊ê◊ï◊™◊†◊ï ◊¢◊ú ◊î◊©◊ô◊†◊ï◊ô◊ô◊ù ◊©◊™◊®◊¶◊î ◊ú◊ë◊¶◊¢ ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö. ◊†◊ë◊ì◊ï◊ß ◊ê◊™ ◊î◊ë◊ß◊©◊î ◊ï◊†◊ó◊ñ◊ï◊® ◊ê◊ú◊ô◊ö.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Indique los cambios que desea realizar en su agenda. Revisaremos su solicitud y nos comunicaremos con usted. En cualquier momento, puede regresar al men√∫ principal escribiendo 'Men√∫'."
        ],
        'team_schedule_change' => [
            'en' => ":worker_name requested a schedule change: :message. \nPlease review and handle accordingly..",
        ],
        'change_schedule_comment' => [
            'en' => "We received your request for schedule changes.\nHere‚Äôs your request:\n':message'\nYour request has been forwarded to our team for review and action.",
            'heb' => "◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊ë◊ß◊©◊™◊ö ◊ú◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î.\n◊ú◊î◊ú◊ü ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö:\n':message'\n◊î◊ë◊ß◊©◊î ◊î◊ï◊¢◊ë◊®◊î ◊ú◊¶◊ï◊ï◊™ ◊©◊ú◊†◊ï ◊ú◊ë◊ì◊ô◊ß◊î ◊ï◊ò◊ô◊§◊ï◊ú.",
            'ru' => "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.\n–í–æ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n':message'\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            'spa' => "Hemos recibido tu solicitud de cambios en el horario.\nAqu√≠ est√° tu solicitud:\n':message'\nTu solicitud ha sido enviada a nuestro equipo para su revisi√≥n y acci√≥n.",
        ],
        'sorry' => [
            'en' => "I'm sorry, I didn‚Äôt understand your response.\n‚Ä¢ Reply with a number from the menu options.\n‚Ä¢ Type 'menu' to return to the main menu.",
            'heb' => "◊û◊¶◊ò◊¢◊®◊ô◊ù, ◊ú◊ê ◊î◊ë◊†◊ï ◊ê◊™ ◊™◊©◊ï◊ë◊™◊ö.\n‚Ä¢ ◊ê◊†◊ê ◊î◊©◊ë ◊¢◊ù ◊û◊°◊§◊® ◊û◊ê◊ó◊™ ◊î◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊ë◊™◊§◊®◊ô◊ò.\n‚Ä¢ ◊î◊ß◊ú◊ì '◊™◊§◊®◊ô◊ò' ◊õ◊ì◊ô ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô",
            'ru' => "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª.\n‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é.\n‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            'spa' => "Lo siento, no entend√≠ tu respuesta.\n‚Ä¢ Responde con un n√∫mero de las opciones del men√∫.\n‚Ä¢ Escribe 'men√∫' para volver al men√∫ principal.",
        ],
        'access_employee_portal' => [
            'en' => "Here is the link to the employee portal: üåê\n:link\nLog in with your credentials to access your account and details.\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊î◊†◊î ◊î◊ß◊ô◊©◊ï◊® ◊ú◊§◊ï◊®◊ò◊ú ◊î◊¢◊ï◊ë◊ì◊ô◊ù: üåê\n:link\n◊î◊ô◊õ◊†◊° ◊¢◊ù ◊î◊§◊®◊ò◊ô◊ù ◊©◊ú◊ö ◊õ◊ì◊ô ◊ú◊í◊©◊™ ◊ú◊ó◊©◊ë◊ï◊†◊ö.\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: üåê\n:link\n–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏ –¥–µ—Ç–∞–ª—è–º.\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Aqu√≠ est√° el enlace al portal de empleados: üåê\n:link\nInicia sesi√≥n con tus credenciales para acceder a tu cuenta y detalles.\nEn cualquier momento, puedes volver al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'today_and_tomorrow_schedule' => [
            'en' => "Your schedule is as follows:\nToday: :today_schedule\nTomorrow: :tomorrow_schedule\n\nAt any time, you can return to the main menu by typing 'Menu'.",
            'heb' => "◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö ◊î◊ï◊ê:\n◊î◊ô◊ï◊ù: :today_schedule\n◊û◊ó◊®: :tomorrow_schedule\n\n◊ë◊õ◊ú ◊©◊ú◊ë ◊†◊ô◊™◊ü ◊ú◊ó◊ñ◊ï◊® ◊ú◊™◊§◊®◊ô◊ò ◊î◊®◊ê◊©◊ô ◊¢◊ú ◊ô◊ì◊ô ◊î◊ß◊ú◊ì◊™ '◊™◊§◊®◊ô◊ò'.",
            'ru' => "–í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Å–ª–µ–¥—É—é—â–∏–π:\n–°–µ–≥–æ–¥–Ω—è: :today_schedule\n–ó–∞–≤—Ç—Ä–∞: :tomorrow_schedule\n\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ '–º–µ–Ω—é'.",
            'spa' => "Tu horario es el siguiente:\nHoy: :today_schedule\nMa√±ana: :tomorrow_schedule\n\nEn cualquier momento, puedes volver al men√∫ principal escribiendo 'Men√∫'.",
        ],
        'attempts' => [
            "en" => "We couldn‚Äôt verify your request. Please contact the team directly for assistance.",
            "heb" => "◊ú◊ê ◊î◊¶◊ú◊ó◊†◊ï ◊ú◊ê◊û◊™ ◊ê◊™ ◊ë◊ß◊©◊™◊ö. ◊ê◊†◊ê ◊¶◊ï◊® ◊ß◊©◊® ◊¢◊ù ◊î◊¶◊ï◊ï◊™ ◊ô◊©◊ô◊®◊ï◊™ ◊ú◊¢◊ñ◊®◊î.",
            "ru" => "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–º–æ—â–∏.",
        ],
        "team_attempts" => [
            "en" => ":worker_name failed to complete their request. Please reach out to them.",
            "heb" => ":worker_name ◊ú◊ê ◊î◊©◊ú◊ô◊ù ◊ê◊™ ◊ë◊ß◊©◊™◊ï. ◊†◊ê ◊ú◊ô◊¶◊ï◊® ◊ß◊©◊® ◊¢◊û◊ï.",
            "ru" => ":worker_name –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.",
        ]
    ];


    public function fbWebhookCurrentLive(Request $request)
    {
        $get_data = $request->getContent();
        $data_returned = json_decode($get_data, true);
        $messageId = $data_returned['messages'][0]['id'] ?? null;
        $lng = "en";
        
        if (!$messageId) {
            \Log::info('Invalid message data');
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if (Cache::get('worker_processed_message_' . $messageId) === $messageId) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if (
            isset($data_returned['messages']) &&
            isset($data_returned['messages'][0]['from_me']) &&
            $data_returned['messages'][0]['from_me'] == false
        ) {
            $message_data = $data_returned['messages'];
            $from = $message_data[0]['from'];
            $input = $data_returned['messages'][0]['text']['body'];
            $lng = $this->detectLanguage($input);
            $currentStep = 0;

            WorkerWebhookResponse::create([
                'status' => 1,
                'name' => 'whatsapp',
                'entry_id' => (isset($get_data['entry'][0])) ? $get_data['entry'][0]['id'] : '',
                'message' => $data_returned['messages'][0]['text']['body'],
                'number' => $from,
                'read' => 0,
                'flex' => 'W',
                'data' => json_encode($get_data)
            ]);

            $workerLead = WorkerLeads::where('phone', $from)->first();
            $user = User::where('phone', $from)
                    ->where('status', 1)
                    ->first();

            if($user){
                \Log::info('user already exist ...');
                die("user already exist");
            }

            if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
                $messageInput = strtolower(trim($input));
                \Log::info($messageInput);

                $pattern1 = '/^(\+?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4})\s*([hnut])\s*(?(?=\2h)(\d+)|(\d+)?)$/i';
                // '/^(\+?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4})\s*([hnut])\s*(\d+)?$/i'
                $pattern2 = '/^(new|◊ó◊ì◊©)\s+([\s\S]+?)\s+(ours|mp)\s+(\+?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4})$/is';
                $input = implode(' ', array_map('trim', explode("\n", $messageInput)));

                $last_input = Cache::get('manpower');
                \Log::info($last_input);

                if (preg_match($pattern1, $messageInput, $matches)
                    && ($message_data[0]['chat_id'] == config('services.whatsapp_groups.relevant_with_workers'))) {

                    $phoneNumber = trim($matches[1]); // Extracts the phone number
                    $statusInput = strtolower($matches[2]); // Extracts the status (h/n/u/t)
                    $numericValue = intval($matches[3] ?? 0); // Extracts the numeric value (e.g., 55)
                    // $numericValue = isset($matches[3]) ? intval($matches[3]) : null; // Extracts numeric value (if present)

                    \Log::info('Phone: ' . $phoneNumber . ' | Status: ' . $statusInput . ' | Value: ' . $numericValue);

                    // Find the workerLead based on the phone number
                    $workerLead = WorkerLeads::where('phone', $phoneNumber)->first();

                    if ($workerLead) {
                        // Determine the status
                        switch ($statusInput) {
                            case 'h':
                                $workerLead->status = "hiring";
                                $workerLead->hourly_rate = $numericValue;
                                break;
                            case 'u':
                                $workerLead->status = "unanswered";
                                break;
                            case 't':
                                $workerLead->status = "will-think";
                                break;
                            case 'n':
                                $workerLead->status = "not-hired";
                                break;
                        }

                        $workerLead->save();

                        // Send appropriate WhatsApp message
                        match ($workerLead->status) {
                            "hiring" => [
                                $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::NEW_LEAD_HIRIED_TO_TEAM),
                                $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::WORKER_LEAD_FORMS_AFTER_HIRING)
                            ],
                            "not-hired" => $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::WORKER_LEAD_NOT_RELEVANT_BY_TEAM),
                            "unanswered" => $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::NEW_LEAD_HIRING_ALEX_REPLY_UNANSWERED),
                            "will-think" => $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::TEAM_WILL_THINK_SEND_TO_WORKER_LEAD),
                            default => null
                        };

                        return response()->json(['status' => 'Worker status updated', 'value' => $numericValue], 200);
                    }

                    return response()->json(['status' => 'Worker not found'], 404);
                } else if((preg_match($pattern2, $input, $matches))
                    && ($message_data[0]['chat_id'] == config('services.whatsapp_groups.relevant_with_workers'))) {
                    // Log the matches to check
                    $language = (strtolower(trim($matches[1])) == 'new') ? 'en' : 'heb';
                    $workerName = trim($matches[2]);
                    $nameParts = explode(' ', $workerName);
                    // Extract the first name (first word)
                    $firstName = $nameParts[0];
                    // Combine the remaining parts as the last name
                    $lastName = implode(' ', array_slice($nameParts, 1));

                    $companyType = ($matches[3] === 'ours') ? 'my-company' : 'manpower';
                    $phoneNumber = trim($matches[4]);

                    // Check if the worker already exists
                    $workerLead = WorkerLeads::where('phone', $phoneNumber)->first();

                    if (!$workerLead) {
                        // Create new worker lead if not exists
                        $workerLead = new WorkerLeads();
                        $workerLead->firstname = $firstName;
                        $workerLead->lastname = $lastName;
                        $workerLead->lng = $language;
                        $workerLead->role = 'Cleaner';
                        $workerLead->company_type = $companyType;
                        $workerLead->phone = $phoneNumber;
                        $workerLead->status = "pending"; // Default status
                        $workerLead->save();

                        if($workerLead->company_type == 'manpower'){
                            $message = "select manpower company\n";
                            $companies = ManpowerCompany::all();
                            foreach($companies as $key => $company){
                                $message .= $company->id . ". " . $company->name . "\n";
                            }
                            sendTeamWhatsappMessage(config('services.whatsapp_groups.relevant_with_workers'), ['name' => '', 'message' => $message]);
                            Cache::put('manpower', $workerLead->id, now()->addDays(1));
                        }else if($workerLead->company_type == 'my-company'){
                            $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::WORKER_LEAD_FORMS_AFTER_HIRING);
                        }

                        return response()->json([
                            'status' => 'New worker added',
                            'name' => $workerName,
                            'language' => $language,
                            'company_type' => $companyType
                        ], 201);
                    }
                }

                if($last_input){
                    $selectedCompanyId = intval($messageInput);
                    // Update the worker's lead with the selected company ID
                    $workerLead = WorkerLeads::where('id', $last_input)->first();
                    if ($workerLead) {
                        $workerLead->manpower_company_id = $selectedCompanyId;
                        $workerLead->save();

                        // Send confirmation message to the user
                        $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::WORKER_LEAD_FORMS_AFTER_HIRING);
                        Cache::forget('manpower', $last_input);
                    }
                }

                return response()->json(['status' => 'Message format invalid or already processed'], 400);
            }

            if (!$workerLead) {
                $workerLead = WorkerLeads::create([
                    'phone' => $from,
                    'lng' => $lng
                ]);
                WhatsAppBotWorkerState::updateOrCreate(
                    ['worker_lead_id' => $workerLead->id],
                    ['step' => 0, 'language' => $lng]
                );
                // Send the step0 message
                $initialMessage = $this->botMessages['step0'][$lng];
                $result = sendWorkerWhatsappMessage($from, ['name' => '', 'message' => $initialMessage]);
                // Save the admin message for step0
                WorkerWebhookResponse::create([
                    'status' => 1,
                    'name' => 'whatsapp',
                    'message' => $initialMessage,
                    'number' => $from,
                    'read' => 1,
                    'flex' => 'A',
                ]);
                return;
            }

            $workerState = WhatsAppBotWorkerState::where("worker_lead_id", $workerLead->id)->first();

            if ($workerState && $workerState->step == 4) {
                // Conversation is complete, no further processing
                return response()->json(['status' => 'Conversation complete'], 200);
            }

            if (in_array($input, [1, 2])) {
                $languageMap = [1 => 'en', 2 => 'ru'];
                $lng = $languageMap[$input];

                WhatsAppBotWorkerState::updateOrCreate(
                    ['worker_lead_id' => $workerLead->id],
                    ['step' => 0, 'language' => $lng]
                );
                WorkerLeads::updateOrCreate(
                    ['id' => $workerLead->id],
                    ['lng' => $lng]
                );

                $switchMessage = $this->botMessages['step0'][$lng];
                $result = sendWorkerWhatsappMessage($from, ['name' => '', 'message' => $switchMessage]);

                WorkerWebhookResponse::create([
                    'status' => 1,
                    'name' => 'whatsapp',
                    'message' => $switchMessage,
                    'number' => $from,
                    'read' => 1,
                    'flex' => 'A',
                ]);

                return;
            }else{
                // Process user response based on current step
                $currentStep = $workerState->step;
                $nextMessage = $this->processWorkerResponse($workerLead, $input, $currentStep, $workerState);

                if ($nextMessage) {
                    $result = sendWorkerWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);
                    // Save admin message for next step
                    WorkerWebhookResponse::create([
                        'status' => 1,
                        'name' => 'whatsapp',
                        'message' => $nextMessage,
                        'number' => $from,
                        'read' => 1,
                        'flex' => 'A',
                    ]);
                }
            }
        }
    }

    // public function createUser($workerLead){
    //     $firstname = explode(" ", $workerLead->name)[0];
    //     $worker = User::create([
    //         'firstname'     => $request->firstname,
    //         'lastname'      => ($request->lastname) ? $request->lastname : '',
    //         'phone'         => $request->phone,
    //         'email'         => null,
    //         'role'          => $role,
    //         'lng'           => $request->lng,
    //         'passcode'      => $request->password,
    //         'password'      => Hash::make($request->password),
    //         'company_type'  => $request->company_type,
    //         'status'        => $request->status,
    //         'manpower_company_id'       => $request->company_type == "manpower"
    //             ? $request->manpower_company_id
    //             : NULL,
    //         'step' => 0
    //     ]);
    // }

    public function hebdetectLanguage($text)
    {
        // Regex for hebrew
        if (preg_match('/[\x{0590}-\x{05FF}]/u', $text)) {
            return 'heb';
        } else {
            return 'en';
        }
    }


    public function fbActiveWorkersWebhookCurrentLive(Request $request)
    {
        $get_data = $request->getContent();
        $data_returned = json_decode($get_data, true);
        $messageId = $data_returned['messages'][0]['id'] ?? null;
        $lng = "en";

        if (!$messageId) {
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if (Cache::get('active_worker_processed_message_' . $messageId) === $messageId) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('active_worker_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if (
            isset($data_returned['messages']) &&
            isset($data_returned['messages'][0]['from_me']) &&
            $data_returned['messages'][0]['from_me'] == false
        ) {
            $message_data = $data_returned['messages'];
            if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
                die("Group message");
            }
            $from = $message_data[0]['from'];
            $input = trim($data_returned['messages'][0]['text']['body'] ?? '');
            $lng = "heb";

            WorkerWebhookResponse::create([
                'status' => 1,
                'name' => 'whatsapp',
                'entry_id' => (isset($get_data['entry'][0])) ? $get_data['entry'][0]['id'] : '',
                'message' => $data_returned['messages'][0]['text']['body'],
                'number' => $from,
                'read' => 0,
                'flex' => 'W',
                'data' => json_encode($get_data)
            ]);

            $user = User::where('phone', $from)
                    ->where('status', 1)
                    ->first();
            if ($user) {
                \Log::info('User found activeWorker: ' . $user);
            }

            if ($user && $user->stop_last_message == 1) {
                $lng = $user->lng;
                $last_menu = null;
                $send_menu = null;
                $activeWorkerBot = WhatsAppBotActiveWorkerState::where('worker_id', $user->id)->first();

                if($activeWorkerBot){
                    $menu_option = explode('->', $activeWorkerBot->menu_option);
                    $last_menu = end($menu_option);
                }

                $cacheKey = 'send_menu_sorry_count_' . $from;

                // Initialize the cache if not already set
                if (!Cache::has($cacheKey)) {
                    Cache::put($cacheKey, 0, now()->addHours(24));
                }

                if(empty($last_menu) || in_array(strtolower($input), ["menu", "–º–µ–Ω—é", "◊™◊§◊®◊ô◊ò", "men√∫"])) {
                    $send_menu = 'main_menu';
                } else if ($last_menu == 'main_menu' && $input == '1') {
                    $send_menu = 'talk_to_manager';
                } else if ($last_menu == 'talk_to_manager' && !empty($input)) {
                    $send_menu = 'comment';
                } else if ($last_menu == 'main_menu' && $input == '2') {
                    $send_menu = 'change_schedule';
                } else if ($last_menu == 'change_schedule' && !empty($input)) {
                    $send_menu = 'change_schedule_comment';
                } else if ($last_menu == 'main_menu' && $input == '3') {
                    $send_menu = 'today_and_tomorrow_schedule';
                } else if ($last_menu == 'main_menu' && $input == '4') {
                    $send_menu = 'access_employee_portal';
                } else {
                    // Handle 'sorry' case
                    $send_menu = 'sorry';
                    $sorryCount = Cache::increment($cacheKey);
                    if ($sorryCount > 4) {
                        Cache::put($cacheKey, 0, now()->addHours(24)); // Reset to 0 and keep the cache expiration
                        $send_menu = 'attempts_exceeded'; // Handle as 'attempts_exceeded'
                    } elseif ($sorryCount == 4) {
                        $send_menu = 'attempts_exceeded';
                    }
                }

                switch ($send_menu) {
                    case 'main_menu':
                        $initialMessage = $this->activeWorkersbotMessages['main_menu'][$lng];
                        WhatsAppBotActiveWorkerState::updateOrCreate(
                            ["worker_id" => $user->id],
                            [
                                'menu_option' => 'main_menu',
                                'lng' => $lng,
                            ]
                        );
                        // Replace :worker_name with the user's firstname and lastname
                        $workerName = "*".(($user->firstname ?? ''). ' ' . ($user->lastname ?? ''))."*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $initialMessage);
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);

                        WorkerWebhookResponse::create([
                            'status' => 1,
                            'name' => 'whatsapp',
                            'message' => $personalizedMessage,
                            'number' => $from,
                            'read' => 1,
                            'flex' => 'A',
                        ]);
                        break;

                    case 'talk_to_manager':
                        $nextMessage = $this->activeWorkersbotMessages['talk_to_manager'][$lng];
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);

                        $activeWorkerBot->update(['menu_option' => 'main_menu->talk_to_manager', 'lng' => $lng]);

                        WorkerWebhookResponse::create([
                            'status' => 1,
                            'name' => 'whatsapp',
                            'message' => $nextMessage,
                            'number' => $from,
                            'read' => 1,
                            'flex' => 'A',
                        ]);
                        break;

                    case 'comment':
                        $nextMessage = $this->activeWorkersbotMessages['comment'][$lng];
                        $workerName = (($user->firstname ?? ''). ' ' . ($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);

                        $nextMessage = $this->activeWorkersbotMessages['team_comment']["en"];
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.problem_with_workers'), ['name' => '', 'message' => $personalizedMessage]);
                        $activeWorkerBot->delete();
                        break;

                    case 'change_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['change_schedule'][$lng];
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);

                        $activeWorkerBot->update(['menu_option' => 'main_menu->change_schedule', 'lng' => $lng]);

                        WorkerWebhookResponse::create([
                            'status' => 1,
                            'name' => 'whatsapp',
                            'message' => $nextMessage,
                            'number' => $from,
                            'read' => 1,
                            'flex' => 'A',
                        ]);
                        break;

                    case 'change_schedule_comment':
                        if ($lng == 'heb') {
                            $reason = "◊©◊†◊î ◊ú◊ï◊ó ◊ñ◊û◊†◊ô◊ù";
                        }else if($lng == 'spa'){
                            $reason = "Cambiar horario";
                        }else if($lng == 'ru'){
                            $reason = "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
                        }else{
                            $reason = "Change Schedule";
                        }
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->reason = $reason;
                        $scheduleChange->comments = $input;
                        $scheduleChange->save();

                        $nextMessage = $this->activeWorkersbotMessages['team_schedule_change']["en"];
                        $workerName = (($user->firstname ?? ''). ' ' . ($user->lastname ?? ''));
                        $personalizedMessage = str_replace([':worker_name', ':message'], [$workerName, $input], $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);

                        $message = $this->activeWorkersbotMessages['change_schedule_comment'][$lng];
                        $message = str_replace([':message'], [$input], $message);
                        sendClientWhatsappMessage($from, array('message' => $message));
                        $activeWorkerBot->delete();
                        break;

                    case 'access_employee_portal':
                        $nextMessage = $this->activeWorkersbotMessages['access_employee_portal'][$lng];
                        $personalizedMessage = str_replace(':link', generateShortUrl(url("worker/login"), 'worker'), $nextMessage);
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $personalizedMessage]);
                        $activeWorkerBot->delete();
                        break;

                    case 'sorry':
                        $message = $this->activeWorkersbotMessages['sorry'][$lng];
                        sendClientWhatsappMessage($from, array('message' => $message));
                        break;

                    case 'today_and_tomorrow_schedule':
                        $nextMessage = $this->activeWorkersbotMessages['today_and_tomorrow_schedule'][$lng];
                        $todayJobs = Job::where('worker_id', $user->id)
                        ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                        ->whereDate('start_date', now())
                        ->get();

                        $tomorrowJobs = Job::where('worker_id', $user->id)
                        ->whereNotIn('status', [JobStatusEnum::COMPLETED, JobStatusEnum::CANCEL])
                        ->whereDate('start_date', now()->addDay(1))
                        ->get();

                        $todaySchedule = "";
                        $tomorrowSchedule = "";
                        if ($todayJobs && $todayJobs->count() > 0) {
                            foreach ($todayJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if($job->service) {
                                    $todaySchedule .= $job->service->name . ', ';
                                }
                                $todaySchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if($job->propertyAddress) {
                                    $todaySchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if($job->client) {
                                    $todaySchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $todaySchedule .= "\n";
                            }
                        }else{
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊û◊©◊®◊ï◊™ ◊î◊ô◊ï◊ù";
                            }else if($lng == 'spa'){
                                $reason = "No hay trabajos programados para hoy";
                            }else if($lng == 'ru'){
                                $reason = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç";
                            }else{
                                $reason = "No today jobs scheduled";
                            }
                            $todaySchedule = $reason;
                        }

                        if ($tomorrowJobs && $tomorrowJobs->count() > 0) {
                            foreach ($tomorrowJobs as $job) {
                                Carbon::setLocale($lng == 'en' ? 'en' : 'he');
                                $day = Carbon::parse($job->start_date)->translatedFormat('l'); // Use translatedFormat for localized day
                                if($job->service) {
                                    $tomorrowSchedule .= $job->service->name . ', ';
                                }
                                $tomorrowSchedule .=  $day . ' - ' . $job->start_time . ' ' . $job->end_time . ", ";
                                if($job->propertyAddress) {
                                    $tomorrowSchedule .= $job->propertyAddress->geo_address . ', ';
                                }
                                if($job->client) {
                                    $tomorrowSchedule .= $job->client->firstname . ' ' . $job->client->lastname;
                                }
                                $tomorrowSchedule .= "\n";
                            }
                        }else{
                            if ($lng == 'heb') {
                                $reason = "◊ú◊ê ◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊¢◊ë◊ï◊ì◊ï◊™ ◊û◊ó◊®";
                            }else if($lng == 'spa'){
                                $reason = "No hay trabajos programados para ma√±ana";
                            }else if($lng == 'ru'){
                                $reason = "–ó–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç";
                            }else{
                                $reason = "No tomorrow jobs scheduled";
                            }
                            $tomorrowSchedule = $reason;
                        }
                        $nextMessage = str_replace(':today_schedule', $todaySchedule, $nextMessage);
                        $nextMessage = str_replace(':tomorrow_schedule', $tomorrowSchedule, $nextMessage);
                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $nextMessage]);
                        $activeWorkerBot->delete();
                        break;

                    case 'attempts_exceeded':
                        // Handle attempts exceeded logic
                        $message = $this->activeWorkersbotMessages['attempts'][$lng];
                        sendClientWhatsappMessage($from, array('message' => $message));

                        // Notify the team
                        $nextMessage = $this->activeWorkersbotMessages['team_attempts']["heb"];
                        $workerName = "*".(($user->firstname ?? ''). ' ' . ($user->lastname ?? ''))."*";
                        $personalizedMessage = str_replace(':worker_name', $workerName, $nextMessage);
                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);
                        // Reset the cache
                        Cache::forget($cacheKey);
                        $activeWorkerBot->delete();

                        break;

                    default:
                        # code...
                        break;
                }
            }
        }
    }

    public function activeWorkersMonday(Request $request)
    {
        $get_data = $request->getContent();
        $data_returned = json_decode($get_data, true);
        $messageId = $data_returned['messages'][0]['id'] ?? null;
        $lng = "en";

        if (!$messageId) {
            return response()->json(['status' => 'Invalid message data'], 400);
        }

        // Check if the messageId exists in cache and matches
        if (Cache::get('worker_monday_processed_message_' . $messageId) === $messageId) {
            \Log::info('Already processed');
            return response()->json(['status' => 'Already processed'], 200);
        }

        // Store the messageId in the cache for 1 hour
        Cache::put('worker_monday_processed_message_' . $messageId, $messageId, now()->addHours(1));

        if (
            isset($data_returned['messages']) &&
            isset($data_returned['messages'][0]['from_me']) &&
            $data_returned['messages'][0]['from_me'] == false
        ) {
            $message_data = $data_returned['messages'];
            if (Str::endsWith($message_data[0]['chat_id'], '@g.us')) {
                die("Group message");
            }
            $from = $message_data[0]['from'];

            $user = User::where('phone', $from)
                    ->where('status', 1)
                    ->first();

            if ($user && $user->stop_last_message == 0) {
                $m = null;

                $msgStatus = Cache::get('worker_monday_msg_status_' . $user->id);

                if(empty($msgStatus)) {
                    $msgStatus = 'main_monday_msg';
                }

                if(!empty($msgStatus)) {
                    $menu_option = explode('->', $msgStatus);
                    $messageBody = trim($data_returned['messages'][0]['text']['body'] ?? '');
                    $last_menu = end($menu_option);

                    if($last_menu == 'main_monday_msg' && $messageBody == '1') {
                        // Send appropriate message
                        if ($user->lng == 'heb') {
                            $m = "◊û◊î◊ï ◊î◊©◊ô◊†◊ï◊ô ◊©◊ê◊™◊î ◊û◊ë◊ß◊© ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê? ◊™◊©◊ï◊ë◊™◊ö ◊™◊ï◊¢◊ë◊® ◊ú◊¶◊ï◊ï◊™.";
                        } else if ($user->lng == 'ru') {
                            $m = "–ö–∞–∫–∏–µ —É –≤–∞—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é? –í–∞—à –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ.";
                        } else if ($user->lng == 'en') {
                            $m = "What is your change for next week? Your response will be forwarded to the team.";
                        } else {
                            $m = "¬øCu√°l es tu cambio para la pr√≥xima semana? Tu respuesta ser√° enviada al equipo.";
                        }

                        sendClientWhatsappMessage($from, ['name' => '', 'message' => $m]);
                        Cache::put('worker_monday_msg_status_' . $user->id, 'next_week_change', now()->addDay(1));
                        WorkerWebhookResponse::create([
                            'status' => 1,
                            'name' => 'whatsapp',
                            'message' => $m,
                            'number' => $from,
                            'read' => 1,
                            'flex' => 'A',
                        ]);
                    } else if ($last_menu == 'main_monday_msg' && $messageBody == '2') {


                        $message = null;

                        if($user->lng == 'heb'){
                            $message = '◊©◊ú◊ï◊ù ' . ($user->firstname ?? '' . " " . $user->lastname ?? '') . ',
◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊™◊í◊ï◊ë◊™◊ö. ◊ê◊ô◊ü ◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ö ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê.

◊ë◊ë◊®◊õ◊î,
◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ';
                        } else if($user->lng == 'ru'){
                            $message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '  . ($user->firstname ?? '' . " " . $user->lastname ?? '') .',
–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç. –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ';
                        } else{
                            $message = 'Hello '  . ($user->firstname ?? '' . " " . $user->lastname ?? '') . ',
We received your response. There are no changes to your schedule for next week.

Best Regards,
Broom Service Team üåπ ';
                        }

                        sendClientWhatsappMessage($from, array('message' => $message));
                        Cache::forget('worker_monday_msg_status_' . $user->id);
                        WorkerMetas::where('worker_id', $user->id)->where('key', 'monday_msg_sent')->delete();
                        $user->stop_last_message = 1;
                        $user->save();
                    } else if ($last_menu == 'next_week_change' && !empty($messageBody)) {
                        $scheduleChange = new ScheduleChange();
                        $scheduleChange->user_type = get_class($user);
                        $scheduleChange->user_id = $user->id;
                        $scheduleChange->comments = $messageBody;
                        $scheduleChange->save();

                        $personalizedMessage = "◊©◊ú◊ï◊ù ◊¶◊ï◊ï◊™,\n" . ($user->firstname ?? '') . " " . ($user->lastname ?? '') . " ◊ë◊ô◊ß◊© ◊ú◊ë◊¶◊¢ ◊©◊ô◊†◊ï◊ô ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊©◊ú◊ï ◊ú◊©◊ë◊ï◊¢ ◊î◊ë◊ê.\n◊î◊ë◊ß◊©◊î ◊©◊ú◊ï ◊î◊ô◊ê:\n\"".$messageBody."\"\n◊ê◊†◊ê ◊ë◊ì◊ß◊ï ◊ï◊ò◊§◊ú◊ï ◊ë◊î◊™◊ê◊ù.\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊°";

                        sendTeamWhatsappMessage(config('services.whatsapp_groups.workers_availability'), ['name' => '', 'message' => $personalizedMessage]);



                        $message = null;

                        if($user->lng == 'heb'){
                            $message = '◊©◊ú◊ï◊ù ' . ($user->firstname ?? '') . " " . ($user->lastname ?? '') . ',
◊ß◊ô◊ë◊ú◊†◊ï ◊ê◊™ ◊™◊í◊ï◊ë◊™◊ö. ◊ë◊ß◊©◊™◊ö ◊ú◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊°◊ô◊ì◊ï◊® ◊î◊¢◊ë◊ï◊ì◊î ◊î◊™◊ß◊ë◊ú◊î ◊ï◊î◊ï◊¢◊ë◊®◊î ◊ú◊¶◊ï◊ï◊™ ◊©◊ú◊†◊ï ◊ú◊ë◊ì◊ô◊ß◊î ◊ï◊ò◊ô◊§◊ï◊ú.

◊ú◊î◊ú◊ü ◊î◊ë◊ß◊©◊î ◊©◊ú◊ö:
"' . $scheduleChange->comments . '"

◊ë◊ë◊®◊õ◊î,
◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ';
                        } else if($user->lng == 'ru'){
                            $message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '  . ($user->firstname ?? '') . " " . ($user->lastname ?? '') .',
–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–í–æ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:
"' . $scheduleChange->comments . '"

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ';
                        } else{
                            $message = 'Hello '  . ($user->firstname ?? '') . " " . ($user->lastname ?? '') . ',
We received your response. Your request for changes to your schedule has been received and forwarded to our team for review and action.

Here‚Äôs your request:
"' . $scheduleChange->comments . '"

Best Regards,
Broom Service Team üåπ ';
                        }

                        sendClientWhatsappMessage($from, array('message' => $message));
                        Cache::forget('worker_monday_msg_status_' . $user->id);
                        WorkerMetas::where('worker_id', $user->id)->where('key', 'monday_msg_sent')->delete();
                        $user->stop_last_message = 1;
                        $user->save();
                    } else {
                        // Follow-up message for returning to the menu, with translation based on the client's language
                        if ($user->lng == 'heb') {
                            $follow_up_msg = "◊û◊¶◊ò◊¢◊®◊ô◊ù, ◊ú◊ê ◊î◊ë◊†◊ï. ◊ê◊†◊ê ◊î◊©◊ë ◊¢◊ù ◊î◊°◊§◊®◊î 1 ◊ê◊ù ◊ô◊© ◊ú◊ö ◊©◊ô◊†◊ï◊ô◊ô◊ù, ◊ê◊ï 2 ◊ê◊ù ◊î◊°◊ô◊ì◊ï◊® ◊†◊©◊ê◊® ◊õ◊§◊ô ◊©◊î◊ô◊î.\n\n◊ê◊ù ◊ú◊ê ◊™◊™◊ß◊ë◊ú ◊™◊©◊ï◊ë◊î ◊™◊ï◊ö 5 ◊©◊¢◊ï◊™, ◊î◊†◊ï◊©◊ê ◊ô◊ï◊¢◊ë◊® ◊ú◊ò◊ô◊§◊ï◊ú ◊î◊¶◊ï◊ï◊™.\n\n◊ë◊ë◊®◊õ◊î,\n◊¶◊ï◊ï◊™ ◊ë◊®◊ï◊ù ◊°◊®◊ï◊ï◊ô◊° üåπ";
                        }else if ($user->lng == 'ru') {
                            $follow_up_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ 1, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–ª–∏ 2, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤, –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–µ.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Broom Service üåπ";
                        } else if($user->lng == 'en') {
                            $follow_up_msg = "Sorry, I didn‚Äôt quite understand that. Please reply with the number 1 if you have changes or 2 if your schedule remains the same.\n\nIf no response is received within 5 hours, the issue will be escalated to the team.\n\nBest Regards,\nBroom Service Team üåπ";
                        }else{
                            $follow_up_msg = "Sorry, I didn‚Äôt quite understand that. Please reply with the number 1 if you have changes or 2 if your schedule remains the same.\n\nIf no response is received within 5 hours, the issue will be escalated to the team.\n\nBest Regards,\nBroom Service Team üåπ";
                        }

                        WorkerWebhookResponse::create([
                            'status' => 1,
                            'name' => 'whatsapp',
                            'entry_id' => (isset($get_data['entry'][0])) ? $get_data['entry'][0]['id'] : '',
                            'message' => $data_returned['messages'][0]['text']['body'],
                            'number' => $from,
                            'read' => 1,
                            'flex' => 'A',
                            'data' => json_encode($get_data)
                        ]);

                        sendClientWhatsappMessage($from, array('message' => $follow_up_msg));
                    }
                }
            }
        }
    }

    public function processWorkerResponse($workerLead, $input, $currentStep,$workerState)
    {
        $messages = $this->botMessages;
        $lng = $workerState->language;
        $response = strtolower(trim($input));

        switch ($currentStep) {
            case 0:
                if (in_array($response, ['yes', 's√≠', '–î–∞', '◊õ÷º÷µ◊ü'])) {
                    $workerLead->experience_in_house_cleaning = true;
                    $workerState->step = 1;
                    $workerState->save();
                    $workerLead->save();
                    return $messages['step2'][$lng];
                } elseif (in_array($response, ['no', 'No', '–ù–µ—Ç', '◊ú◊ê'])) {
                    $workerLead->experience_in_house_cleaning = false;
                    $workerState->step = 1;
                    $workerState->save();
                    $workerLead->save();
                    return $messages['step2'][$lng];
                } else {
                    $workerState->step = 0;
                    $workerState->save();
                    return $messages['step1'][$lng];
                }

            case 1:
                if (in_array($response, ['yes', 's√≠', '–î–∞','◊õ÷º÷µ◊ü'])) {
                    $workerLead->you_have_valid_work_visa = true;
                    $workerLead->save();
                    return $this->sendMessageToTeamOrLead($workerLead, $input);
                } elseif (in_array($response, ['no', 'No', '–ù–µ—Ç', '◊ú◊ê'])) {
                    $workerLead->you_have_valid_work_visa = false;
                    $workerLead->save();
                    return $this->sendMessageToTeamOrLead($workerLead, $input);
                } else {
                    return $messages['step3'][$lng];
                }

            case 2:
               $this->sendMessageToTeamOrLead($workerLead, $input);
        }
    }

    protected function sendMessageToTeamOrLead($workerLead, $input)
       {
           if ( $workerLead->you_have_valid_work_visa ) {

                $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::NEW_LEAD_FOR_HIRING_TO_TEAM);

                WhatsAppBotWorkerState::updateOrCreate(
                    ['worker_lead_id' => $workerLead->id],
                    ['step' => 4]
                );

           } else {
                $workerLead = WorkerLeads::find($workerLead->id);
                $workerLead->status = "not-hired";
                $workerLead->save();

               $resp = $this->sendWhatsAppMessage($workerLead, WhatsappMessageTemplateEnum::FINAL_MESSAGE_IF_NO_TO_LEAD);

               WhatsAppBotWorkerState::updateOrCreate(
                   ['worker_lead_id' => $workerLead->id],
                   ['step' => 4]
               );

           }

       }


    public function detectLanguage($text)
    {
        // Regex for Russian (Cyrillic)
        if (preg_match('/[\x{0400}-\x{04FF}]/u', $text)) {
            return 'ru';
        } else {
            return 'en';
        }

        // else if (preg_match('/[a-zA-Z]/', $text)) {
        //     return 'en';
        // } else {
        //     return 'heb';
        // }
    }

    protected function sendWhatsAppMessage($workerLead, $enum)
    {
       event(new WhatsappNotificationEvent([
            "type" => $enum,
            "notificationData" => [
                'worker' => $workerLead->toArray(),
            ]
        ]));
    }

}
